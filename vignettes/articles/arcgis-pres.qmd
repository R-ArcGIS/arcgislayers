---
title: "arcgis R api prototype"
author: "Josiah Parry"
format: 
  revealjs:
    incremental: true
---

```{r}
library(sf)
options(width = 70)
options(crayon.enabled = TRUE)
ansi_aware_handler <- function(x, options) {
  paste0(
    "<pre class=\"r-output\"><code>",
    fansi::sgr_to_html(x = x, warn = FALSE, term.cap = "256"),
    "</code></pre>"
  )
}

knitr::knit_hooks$set(
  output = ansi_aware_handler, 
  message = ansi_aware_handler, 
  warning = ansi_aware_handler,
  error = ansi_aware_handler
)

```


## Goals: 

- be as fast as possible (use Rcpp where it makes sense)
- be lazy
- be familiar (integrate with dplyr)

## Be familiar

- R users expect tibbles
- R users expect sf objects

## tibbles

> "Tibbles are data.frames that are lazy and surly" 

. . .

- type-safe
- strict

. . .

```{r}
dplyr::band_instruments
```

## sf object

- extension of `data.frame`s with an explicit geometry column
- `sf == "simple features"` 
  - uses simple feature standard ([OGC](https://www.ogc.org/standards/sfa))

. . .

```{r, echo = FALSE}
sf::st_sf(
  x = 1:5,
  geometry = sfheaders::sfc_point(matrix(runif(10, -90, 90), ncol = 2)),
  crs = 4326
)
```


## be lazy 

- delay computation as long as possible
- `{dbplyr}` is a dplyr interface for databases
  - dplyr becomes a front-end and backend agnostic

## dbplyr example

```{r}
library(dplyr)
# create a fake connection
con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
copy_to(con, mtcars)
```

```{r, echo = TRUE}
car <- tbl(con, "mtcars")

car
```
## behaves like a data frame {auto-animate=true}

```{r, echo = TRUE}
qry <- car |> 
  group_by(cyl) |> 
  summarise(avg_mpg = mean(mpg, na.rm = TRUE))

```

## behaves like a data frame {auto-animate=true}

```{r, echo = TRUE}
qry <- car |> 
  group_by(cyl) |> 
  summarise(avg_mpg = mean(mpg, na.rm = TRUE))


show_query(qry)
```


## behaves like a data frame {auto-animate=true}

```{r, echo = TRUE}
qry <- car |> 
  group_by(cyl) |> 
  summarise(avg_mpg = mean(mpg, na.rm = TRUE))


compute(qry)
```

## behaves like a data frame {auto-animate=true}

```{r, echo = TRUE}
qry <- car |> 
  group_by(cyl) |> 
  summarise(avg_mpg = mean(mpg, na.rm = TRUE))


collect(qry)
```


# api R interface prototype


## Implemented:

- Authentication (client & code)
- Feature Layer
- Table
- Feature Server 
- sf -> Esri geometry conversion
- Feature Layer & table dplyr interface

## `FeatureLayer`

- metadata list with nice print method
- behaves similar to a connection
- stores query 
  - only executed with `collect()`



## `FeatureLayer`

```{r, echo = TRUE}
library(arcgis)

# define the feature layer url
furl <- "https://services.arcgis.com/P3ePLMYs2RVChkJx/ArcGIS/rest/services/USA_Counties_Generalized_Boundaries/FeatureServer/0"

# create a feature layer
layer <- feature_layer(furl)
layer
```

. . .

```r
#> <FeatureLayer <3143 features, 12 fields>>
#> Name: USA Counties - Generalized
#> Geometry Type: esriGeometryPolygon
#> CRS: 4326
#> Capabilities: Query,Extract
```

## `FeatureLayer`

extract fields 

```{r}
list_fields(layer)
```

## `FeatureLayer`

- build a query using `tidyselect` helpers

. . .

```{r, echo = TRUE}
layer |> 
  select(starts_with("STATE"))
```

. . .

```r
#> <FeatureLayer <3143 features, 12 fields>>
#> Name: USA Counties - Generalized
#> Geometry Type: esriGeometryPolygon
#> CRS: 4326
#> Capabilities: Query,Extract
#> 
#> ── Query 
#> outFields: STATE_NAME,STATE_FIPS,STATE_ABBR
```


## `FeatureLayer`

- add `where` clause with `filter()`

. . .

```{r, echo = TRUE}
qry <- layer |> 
  select(starts_with("STATE")) |> 
  filter(STATE_ABBR == "CA")

qry
```

. . .

```r
#> <FeatureLayer <3143 features, 12 fields>>
#> Name: USA Counties - Generalized
#> Geometry Type: esriGeometryPolygon
#> CRS: 4326
#> Capabilities: Query,Extract
#> 
#> ── Query 
#> outFields: STATE_NAME,STATE_FIPS,STATE_ABBR
#> where: STATE_ABBR = 'CA'
```


## `FeatureLayer`

- stop being lazy (bring into memory)

. . .

```{r, echo = TRUE}
collect(qry)
```


## `FeatureServer`

- a collection of feature layers and tables 

. . .

```{r, echo = TRUE}
furl <- "https://services2.arcgis.com/j80Jz20at6Bi0thr/ArcGIS/rest/services/List_of_Providers/FeatureServer/"

ft_srv <- feature_server(furl)
```

. . .

```r
#> <FeatureServer <2 Features>>
#> CRS: 3857
#> Capabilities: Query
#> ┌ Features ──────────────────────────────────────┐
#> │ 24: Adoption_Facilities (esriGeometryPolygon)  │
#> │ 27: Adoption_Org (Table)                       │
#> └────── List of adoption providers in each state ┘
```

. . .

- extract with `get_layer(id)` or `get_all_layers()`
  - returns a `FeatureLayer` or `Table` or named list

## `FeatureServer`

```{r}
get_layer(ft_srv, 24)
```

. . . 

```r
#> <FeatureLayer <51 features, 9 fields>>
#> Name: Adoption_Facilities
#> Geometry Type: esriGeometryPolygon
#> CRS: 3857
#> Capabilities: Query
```

## `Table` 

- `feature_table()` behaves just like `FeatureLayer`

```{r}
tbl_url <- "https://services2.arcgis.com/j80Jz20at6Bi0thr/ArcGIS/rest/services/List_of_Providers/FeatureServer/27"

feature_table(tbl_url)
```

. . .

```r
#> <Table <281 features, 8 fields>>
#> Name: Adoption_Org
#> Capabilities: Query
```

## JSON conversion

- sf object conversion to Esri JSON 
- written in Rcpp 
  - fairly fast
- 3 types of objects: sfg, sfc, sf

## sf object types: 

- sfg: simple feature geometry 
- sfc: simple feature column
- sf: simple feature (data.frame + sfc)

## sf object mapping: 

- sfg -> Geometry Object
- sfc -> FeatureSet with no attributes
- sf -> FeatureSet with attributes

## st_as_geometry() {auto-animate=true}

```{r}
#| echo = TRUE
xyz <- st_point(c(0, 1, 3, 4))
st_as_geometry(xyz) |> 
  jsonify::pretty_json()
```


## st_as_geometry() {auto-animate=true}

```{r}
#| echo = TRUE
lines <-st_multipoint(x = matrix(runif(4, -90, 90), ncol = 2))

st_as_geometry(lines) |> 
  jsonify::pretty_json()
```


## st_as_geometry() {auto-animate=true}

```{r}
#| echo = TRUE
# polygon
m <- matrix(
  c(0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 2, 2, 1, 2, 3, 1, 3, 2, 0, 0, 0),
  ncol = 3,
  byrow = TRUE
)

poly <- st_polygon(list(m))

st_as_geometry(poly) |> 
  jsonify::pretty_json()
```


## st_as_featureset() {auto-animate=true}


```{r, echo = TRUE}
st_as_featureset(sfnetworks::roxel[1,]) |> 
  jsonify::pretty_json()
```

## Need help with: 

- querying image API endpoint
- creating new layers from API 
  - can't find endpoint
- updating field definitions 
  - can't understand `addToDefinition` docs

  
