[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"/articles/Authentication.html","id":"code-based-authentication","dir":"Articles","previous_headings":"","what":"Code based authentication","title":"Authentication","text":"use code based authentication use auth_code() function. requires client ID. client ID public identifier application authenticate . method authentication provides refresh token.","code":""},{"path":"/articles/Authentication.html","id":"getting-the-client-id","dir":"Articles","previous_headings":"Code based authentication","what":"Getting the Client ID","title":"Authentication","text":"client ID likely provided admin AGOL organization ArcGIS Enterprise. case don’t one can likely create one. create client application log portal create new item. Create new Developer credentials  Ensure redirect URL urn:ietf:wg:oauth:2.0:oob keep default selections. Press next fill additional fields.  redirected content page. see credentials application. share . default environment variables used auth_code(). edit environment variables newly created credentials use usethis::edit_r_environ() open .Renviron file . User level environment variables used default. want use project level .Renviron file use usethis::edit_r_environ(\"project\"). Add following lines .Renviron file. ARCGIS_SECRET environment variable used auth_client() necessary auth_code().","code":"ARCGIS_CLIENT=your-client-id ARCGIS_SECRET=your-super-secret-key"},{"path":"/articles/Authentication.html","id":"authenticating","dir":"Articles","previous_headings":"Code based authentication","what":"Authenticating","title":"Authentication","text":"First, load library. Next run auth_code() open tab browser. authenticating somewhere AGOL, set host argument. prompted sign portal.  ’ve signed , copy code appears, return R. Enter code console without modifications press enter.  authentication completed.","code":"library(arcgis) #> Loading required namespace: dplyr token <- auth_code() token #> <httr2_token> #> token_type: bearer #> access_token: <REDACTED> #> expires_at: 2023-03-03 13:21:40 #> refresh_token: <REDACTED> #> username: your-user #> ssl: TRUE #> refresh_token_expires_in: 1209599"},{"path":"/articles/Authentication.html","id":"client-authentication","dir":"Articles","previous_headings":"","what":"Client Authentication","title":"Authentication","text":"non-interactive workflows client OAuth2 flow appropriate. approach require copy paste code browser R session. method generate refresh token, though. Use auth_client() perform client based authentication. auth_client() secret argument , default, uses environment variable ARCGIS_SECRET set .Renviron file . Running https://developers.arcgis.com/rest/users-groups--items/authentication.htm","code":"auth_client() #> <httr2_token> #> token_type: bearer #> access_token: <REDACTED> #> expires_at: 2023-03-03 17:12:48"},{"path":"/articles/Authorization.html","id":"code-based-authorization","dir":"Articles","previous_headings":"","what":"Code based authorization","title":"Authorization","text":"use code based authorization use auth_code() function. requires client ID. client ID public identifier application authenticate . method authorization provides refresh token.","code":""},{"path":"/articles/Authorization.html","id":"getting-the-client-id","dir":"Articles","previous_headings":"Code based authorization","what":"Getting the Client ID","title":"Authorization","text":"client ID likely provided admin AGOL organization ArcGIS Enterprise. case don’t one can likely create one. create client application log portal create new item. Create new Developer credentials  Ensure redirect URL urn:ietf:wg:oauth:2.0:oob keep default selections. Press next fill additional fields.  redirected content page. see credentials application. share . default environment variables used auth_code(). edit environment variables newly created credentials use usethis::edit_r_environ() open .Renviron file . User level environment variables used default. want use project level .Renviron file use usethis::edit_r_environ(\"project\"). Add following lines .Renviron file. ARCGIS_SECRET environment variable used auth_client() necessary auth_code().","code":"ARCGIS_CLIENT=your-client-id ARCGIS_SECRET=your-super-secret-key"},{"path":"/articles/Authorization.html","id":"authenticating","dir":"Articles","previous_headings":"Code based authorization","what":"Authenticating","title":"Authorization","text":"First, load library. Next run auth_code() open tab browser. authenticating somewhere AGOL, set host argument. prompted sign portal.  ’ve signed , copy code appears, return R. Enter code console without modifications press enter.  authorization completed.","code":"library(arcgis) #> Loading required namespace: dplyr token <- auth_code() token #> <httr2_token> #> token_type: bearer #> access_token: <REDACTED> #> expires_at: 2023-03-03 13:21:40 #> refresh_token: <REDACTED> #> username: your-user #> ssl: TRUE #> refresh_token_expires_in: 1209599"},{"path":"/articles/Authorization.html","id":"refreshing-tokens","dir":"Articles","previous_headings":"Code based authorization","what":"Refreshing tokens","title":"Authorization","text":"auth_code() tokens can refreshed. tokens come refresh token can exchanged new token. can done refresh_token(). requires original token, client ID, hostname (https://arcgis.com default). Additionally function validate_or_refresh_token() provided. can useful long running job may exceed token’s validity. token expired, refreshed. expired, expire within refresh_threshold, returned.","code":"refresh_token(token) #> <httr2_token> #> token_type: bearer #> access_token: <REDACTED> #> expires_at: 2023-03-03 15:52:13 #> username: user-name #> ssl: TRUE #> refresh_token: <REDACTED>"},{"path":"/articles/Authorization.html","id":"client-authorization","dir":"Articles","previous_headings":"","what":"Client authorization","title":"Authorization","text":"non-interactive workflows client OAuth2 flow appropriate. approach require copy paste code browser R session. method generate refresh token, though. Use auth_client() perform client based authorization. auth_client() secret argument , default, uses environment variable ARCGIS_SECRET set .Renviron file . Running","code":"auth_client() #> <httr2_token> #> token_type: bearer #> access_token: <REDACTED> #> expires_at: 2023-03-03 17:12:48"},{"path":"/articles/Authorization.html","id":"legacy-password-authorization","dir":"Articles","previous_headings":"","what":"Legacy Password authorization","title":"Authorization","text":"find legacy system requires username password authorization, can accomplish auth_password(). method authorization recommended, still possible. auth_password() arguments username password , default, use .Renviron environment variables ARCGIS_USER ARCGIS_PASSWORD. strongly recommended use environment variables never store credentials plain text scripts.","code":"auth_password() #> <httr2_token> #> token_type: bearer #> access_token: <REDACTED> #> expires_at: 2023-03-03 15:18:21"},{"path":[]},{"path":"/articles/Design-Principles.html","id":"r-object-representation","dir":"Articles","previous_headings":"Background","what":"R object representation","title":"Design Principles","text":"ArcGIS REST API provides access 3 main types GIS data: tables, feature layers, image layers. R represented data.frame tibble objects, sf objects, SpatRaster objects respectively.","code":""},{"path":"/articles/Design-Principles.html","id":"tables","dir":"Articles","previous_headings":"Background > R object representation","what":"Tables","title":"Design Principles","text":"R one first languages built support data frame structures. Data frames rectangular structures represent table-like dataset (think database excel table). Data frames composed columns, equal length. column vector (one dimensional data set) type—fundamental types integer, numeric, character, logical. using R preeminent tool work data frames called dplyr (data pliers) intended work extension data frame called tibbles. Tibbles type safe(ish) far strict (prettier) base R data.frame.","code":""},{"path":"/articles/Design-Principles.html","id":"vector-data","dir":"Articles","previous_headings":"Background > R object representation","what":"Vector Data","title":"Design Principles","text":"sf package R entirely transformative way spatial analysis conducted R reduced barrier entry many (including ). “sf” stands simple features. package based simple feature standard represented well-known text (WKT) standard. Read standard . basic unit sf sfg class object (simple feature geometry). one feature, stored simple feature collection (sfc). sfc classes delineated POINT, MULTIPOINT, POLYGON, MULTIPOLYGON, LINESTRING, MULTILINESTRING, catch GEOMETRY used one type simple feature. Note class sfc_{TYPE}. real power sf ’s ability utilized conjunction data frames thus tools manipulate . sf class object data frame sfc column associated . Note extra information prints prints data frame. sign explicitly spatial. big benefit, stated, can work existing tools like dplyr even ggplot.","code":"# note that wrapping an assignment in parens also prints it (pnt <- sf::st_point(c(0, 1)))  class(pnt) library(sf)  pnts <- st_sfc(   st_point(c(0, 0)),   st_point(c(0, 1)),   st_point(c(1, 1)),   st_point(c(1, 0)) )  pnts  class(pnts) # illustrate catch all geometry. st_sfc(   st_point(),   st_linestring() ) # read an sf object  nc <- read_sf(system.file(\"shape/nc.shp\", package = \"sf\")) nc library(dplyr) library(ggplot2)  nc |>    mutate(prop_sids = SID74 / sum(SID74)) |>    ggplot(aes(fill = prop_sids)) +   geom_sf(color = \"black\", lwd = 0.15) +   scale_fill_viridis_c(option = \"F\") +   theme_void()"},{"path":"/articles/Design-Principles.html","id":"raster-data","dir":"Articles","previous_headings":"Background > R object representation","what":"Raster Data","title":"Design Principles","text":"admitedly comfortable raster data even less R. keep times pay attention, however. know package terra new kid block used phase older raster package (transition currently underway wider rspatial r-spatial communities—different, annoying, know). also possibility using package stars “spatio-temporal arrays raster cubes.” feels like ’s trying much . can read NetCDF files raster images things. think stars reserved special cases. definitely something learn . Geocomputation R talks difference two bit. R GIS Economists mentions using terra also using stars spatial temporal rasters one two .","code":""},{"path":"/articles/Design-Principles.html","id":"lazy-evaluation-and-dbplyr","dir":"Articles","previous_headings":"Background","what":"Lazy evaluation and dbplyr","title":"Design Principles","text":"First, define lazy evaluation. delaying computing last moment. Computation carried value needed told explicitly. dbplyr R package built upon packages dplpyr DBI (database interface). DBI creates database connections. dbplyr allows write dplyr code translated SQL code lazily evaluated. dbplyr amazing quite reasons. First, allows use syntax use normal data frame manipulation database. Meaning dplyr becomes front end consistent doesn’t care back end. , one , theory (practice—’ve done ) write code CSV file prototype code change source database code funciton. Second, dbplyr amazing lazy. can write dplyr code want, nothing actually happening behind scenes building query eventually computed database. means can vast majority computation front database take lift machine. standard practice speeding production code enterprise level. Third, dbplyr control query executed running collect() function. Let’s look example. Take mtcars data set. can group cyl column compute average mpg using basic dplyr code. Now, can create fake database back end use dbplyr. example taken DBI documentation. create reference table using connection. Notice source table<mtcars> [?? x 11]. ?? telling doesn’t know many computation hasn’t happened. Since assigned object computation happened yet. print request value object computed. moment just promise. promises give us value ask . Right now can show query generated us. trigger computation two things can : run compute() run query inside database use collect() run query inside database return result R native object. Compare two: Compute inside database (check source) Collect memory (source longer ) said, think can continue thinking design bit .","code":"mtcars |>    group_by(cyl) |>    summarise(avg_mpg = mean(mpg)) library(DBI)  # Create an ephemeral in-memory RSQLite database con <- dbConnect(RSQLite::SQLite(), dbname = \":memory:\")  # write to the connection dbWriteTable(con, \"mtcars\", mtcars) cars <- tbl(con, \"mtcars\")  cars mpg_query <- cars |>    group_by(cyl) |>    summarise(avg_mpg = mean(mpg, na.rm = TRUE)) dplyr::show_query(mpg_query) dplyr::compute(mpg_query) dplyr::collect(mpg_query)"},{"path":"/articles/Design-Principles.html","id":"features","dir":"Articles","previous_headings":"","what":"Features","title":"Design Principles","text":"Since ’m really familiar vector data ’s care , figured can start . vector data represented AGOL feature layer whereas non-spatial data represented Table. represented FeatureLayer Table classes respectively. goal take inspiration dbplyr. classes contains metadata associated data. Since feature layers tables support querying, want make lazy allow user define filters selections advance ArcGIS API can computation . case ArcGIS REST API database back-end. FeatureLayer Table class objects like remote tables can work define computation needed back-end bring information R necessary.","code":""},{"path":"/articles/Design-Principles.html","id":"query-capabilities","dir":"Articles","previous_headings":"Features","what":"Query capabilities","title":"Design Principles","text":"Feature Layers Tables support querying way extract information API memory. queries permit parameter super basic SQL. Users can use dplyr select filter functions build query want. Let’s take example: table object. list ’s metadata fancy print method. can see list running unclass(tbl) str(tbl). ’s whole lot. Using power dbplyr can use select filter functions tbl. Now fields query printed . Since using dbplyr hood can use tidyselect helper functions select certain columns based strings helpful selectors. still Table object can used build query. now two parameters query populated outFields . Since actually just list object, can extract parameters grabbing query attribute underlying object. run collect() fed http request sent ArcGIS determine brought back session.","code":"library(arcgis)   tbl_url <- \"https://services2.arcgis.com/j80Jz20at6Bi0thr/ArcGIS/rest/services/List_of_Providers/FeatureServer/27\"  tbl <- feature_table(tbl_url)  tbl # str(tbl) tbl_select <- tbl |>    select(OBJECTID, Adoption_Service_Provider, state, starts_with(\"Accredit\"))  tbl_select tbl_filter <- tbl_select |>    filter(state == \"Wisconsin\")  tbl_filter attr(tbl_filter, \"query\") wisconsin_providers <- collect(tbl_filter)  wisconsin_providers"},{"path":"/articles/Design-Principles.html","id":"the-grand-vision","dir":"Articles","previous_headings":"","what":"The Grand Vision™","title":"Design Principles","text":"idea can create objects representation ArcGIS API look nice, store metadata, lazy. Feature Server simply list metadata can use determine Feature Layers want. Say fetch feature layer, also just metadata pretty print method can use bring data memory need! lazy everything keep computation small thus fast! Feature Server know something , don’t data (good!). can get feature ’s ID. ’s gist vision thus far ideas towards future imagery","code":"ft_srv <- feature_server(\"https://services2.arcgis.com/j80Jz20at6Bi0thr/ArcGIS/rest/services/List_of_Providers/FeatureServer/\")  ft_srv get_layer(ft_srv, 24) image_server(\"https://landsat2.arcgis.com/arcgis/rest/services/Landsat/MS/ImageServer\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Josiah Parry. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Parry J (2023). arcgis: Package (Title Case). R package version 0.1.0.","code":"@Manual{,   title = {arcgis: What the Package Does (Title Case)},   author = {Josiah Parry},   year = {2023},   note = {R package version 0.1.0}, }"},{"path":"/index.html","id":"arcgis","dir":"","previous_headings":"","what":"What the Package Does (Title Case)","title":"What the Package Does (Title Case)","text":"goal arcgis provide R interface ArcGIS REST API completely open source analogue ArcGIS Python API.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (Title Case)","text":"can install development version arcgis like : need connected VPN.","code":"remotes::install_git(\"https://devtopia.esri.com/jos13045/arcgis\")"},{"path":"/index.html","id":"feature-layers","dir":"","previous_headings":"","what":"Feature Layers","title":"What the Package Does (Title Case)","text":"Read data feature layer. arcgis implements FeatureLayer class object used control read data Feature Layer service. Create FeatureLayer feature_layer() takes url feature layer argument. FeatureLayer objects lists contain metadata FeatureServer. data used create FeatureLayer taken directly url displayed json format. FeatureLayers intended work somewhat similarly lazy table data brought memory explicitly requested. collect() function fetch data REST endpoint write appropriate type—either sf object data frame. can check see fields types present feature layer using list_fields().","code":"library(arcgis) #>  #> Attaching package: 'arcgis' #> The following object is masked from 'package:stats': #>  #>     filter  # define the feature layer url furl <- \"https://services.arcgis.com/P3ePLMYs2RVChkJx/ArcGIS/rest/services/USA_Counties_Generalized_Boundaries/FeatureServer/0\"  # create a feature layer county_fl <- feature_layer(furl)  county_fl #> <FeatureLayer <3143 features, 12 fields>> #> Name: USA Counties - Generalized #> Geometry Type: esriGeometryPolygon #> CRS: 4326 #> Capabilities: Query,Extract county_sf <- collect(county_fl)  county_sf #> Simple feature collection with 3142 features and 12 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -178.2176 ymin: 18.92179 xmax: -66.96927 ymax: 71.40624 #> Geodetic CRS:  WGS 84 #> # A tibble: 3,142 × 13 #>    OBJECTID NAME     STATE…¹ STATE…² FIPS   SQMI POPUL…³ POP_S…⁴ STATE…⁵ COUNT…⁶ #>  *    <int> <chr>    <chr>   <chr>   <chr> <dbl>   <int>   <dbl> <chr>   <chr>   #>  1        1 Autauga… Alabama 01      01001  604.   58805    97.3 AL      001     #>  2        2 Baldwin… Alabama 01      01003 1633.  231767   142.  AL      003     #>  3        3 Barbour… Alabama 01      01005  905.   25223    27.9 AL      005     #>  4        4 Bibb Co… Alabama 01      01007  626.   22293    35.6 AL      007     #>  5        5 Blount … Alabama 01      01009  651.   59134    90.9 AL      009     #>  6        6 Bullock… Alabama 01      01011  625.   10357    16.6 AL      011     #>  7        7 Butler … Alabama 01      01013  778.   19051    24.5 AL      013     #>  8        8 Calhoun… Alabama 01      01015  612.  116441   190.  AL      015     #>  9        9 Chamber… Alabama 01      01017  603.   34772    57.7 AL      017     #> 10       10 Cheroke… Alabama 01      01019  600.   24971    41.6 AL      019     #> # … with 3,132 more rows, 3 more variables: Shape__Area <dbl>, #> #   Shape__Length <dbl>, geometry <MULTIPOLYGON [°]>, and abbreviated variable #> #   names ¹​STATE_NAME, ²​STATE_FIPS, ³​POPULATION, ⁴​POP_SQMI, ⁵​STATE_ABBR, #> #   ⁶​COUNTY_FIPS list_fields(county_fl) #> # A tibble: 12 × 10 #>    name        type  alias sqlType nulla…¹ edita…² domain defau…³ length descr…⁴ #>    <chr>       <chr> <chr> <chr>   <lgl>   <lgl>   <lgl>  <lgl>    <int> <chr>   #>  1 OBJECTID    esri… OBJE… sqlTyp… FALSE   FALSE   NA     NA          NA  <NA>   #>  2 NAME        esri… Name  sqlTyp… TRUE    TRUE    NA     NA          50 \"{\\\"va… #>  3 STATE_NAME  esri… Stat… sqlTyp… TRUE    TRUE    NA     NA          20 \"{\\\"va… #>  4 STATE_FIPS  esri… Stat… sqlTyp… TRUE    TRUE    NA     NA           2 \"{\\\"va… #>  5 FIPS        esri… FIPS  sqlTyp… TRUE    TRUE    NA     NA           5 \"{\\\"va… #>  6 SQMI        esri… Area… sqlTyp… TRUE    TRUE    NA     NA          NA \"{\\\"va… #>  7 POPULATION  esri… 2020… sqlTyp… TRUE    TRUE    NA     NA          NA \"{\\\"va… #>  8 POP_SQMI    esri… Peop… sqlTyp… TRUE    TRUE    NA     NA          NA \"{\\\"va… #>  9 STATE_ABBR  esri… Stat… sqlTyp… TRUE    TRUE    NA     NA           2 \"{\\\"va… #> 10 COUNTY_FIPS esri… Coun… sqlTyp… TRUE    TRUE    NA     NA           3 \"{\\\"va… #> 11 Shape__Area esri… Shap… sqlTyp… TRUE    FALSE   NA     NA          NA  <NA>   #> 12 Shape__Len… esri… Shap… sqlTyp… TRUE    FALSE   NA     NA          NA  <NA>   #> # … with abbreviated variable names ¹​nullable, ²​editable, ³​defaultValue, #> #   ⁴​description"},{"path":"/index.html","id":"dplyr-like-syntax","dir":"","previous_headings":"Feature Layers","what":"dplyr-like syntax","title":"What the Package Does (Title Case)","text":"may need fields features R session. ’s case, effective bring subset data need. can limit brought memory using select() filter() functions build query can sent rest API. select() FeatureLayer method supports using tidyselect functions except () function. Now ’ve ran select() FeatureLayer query parameters printed . parameters sent along results collect()ed.  can subset data using filter(). Note filtering fairly limited (see API documentation ). Bring memory collect().","code":"county_fl |>    select(contains(\"STATE\")) #> <FeatureLayer <3143 features, 12 fields>> #> Name: USA Counties - Generalized #> Geometry Type: esriGeometryPolygon #> CRS: 4326 #> Capabilities: Query,Extract #>  #> ── Query #> outFields: STATE_NAME,STATE_FIPS,STATE_ABBR county_query <- county_fl |>    select(starts_with(\"STATE\")) |>    filter(STATE_NAME == \"Alabama\")  county_query #> <FeatureLayer <3143 features, 12 fields>> #> Name: USA Counties - Generalized #> Geometry Type: esriGeometryPolygon #> CRS: 4326 #> Capabilities: Query,Extract #>  #> ── Query #> outFields: STATE_NAME,STATE_FIPS,STATE_ABBR #> where: STATE_NAME = 'Alabama' res <- collect(county_query) res #> Simple feature collection with 67 features and 3 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -88.47295 ymin: 30.2336 xmax: -84.89402 ymax: 35.01603 #> Geodetic CRS:  WGS 84 #> # A tibble: 67 × 4 #>    STATE_NAME STATE_FIPS STATE_ABBR                                     geometry #>  * <chr>      <chr>      <chr>                                     <POLYGON [°]> #>  1 Alabama    01         AL         ((-86.82067 32.34731, -86.81446 32.37041, -… #>  2 Alabama    01         AL         ((-87.97309 31.16482, -87.9371 31.17346, -8… #>  3 Alabama    01         AL         ((-85.74337 31.62624, -85.7172 31.67924, -8… #>  4 Alabama    01         AL         ((-87.41986 33.01177, -87.31532 33.0121, -8… #>  5 Alabama    01         AL         ((-86.96799 33.86045, -86.92667 33.87228, -… #>  6 Alabama    01         AL         ((-85.4114 32.15551, -85.41136 32.14547, -8… #>  7 Alabama    01         AL         ((-86.44912 31.97123, -86.45245 31.85498, -… #>  8 Alabama    01         AL         ((-85.79353 33.56343, -85.79315 33.59482, -… #>  9 Alabama    01         AL         ((-85.58963 32.73135, -85.59478 33.11425, -… #> 10 Alabama    01         AL         ((-85.41657 34.08692, -85.39574 33.95983, -… #> # … with 57 more rows"},{"path":"/index.html","id":"other-featurelayer-functions","dir":"","previous_headings":"Feature Layers","what":"Other FeatureLayer functions","title":"What the Package Does (Title Case)","text":"can add parameter ’d like supported query parameters listed documentation using update_params() function. Maybe, want clear query parameters, use clear_query(). preview features feature layer use head()","code":"county_query |>    update_params(returnIdsOnly = \"true\") |>    collect() #>      objectIdFieldName objectIds  #> [1,] \"OBJECTID\"        integer,67 clear_query(county_query) #> <FeatureLayer <3143 features, 12 fields>> #> Name: USA Counties - Generalized #> Geometry Type: esriGeometryPolygon #> CRS: 4326 #> Capabilities: Query,Extract head(county_query) #> Simple feature collection with 6 features and 3 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -88.02045 ymin: 30.2336 xmax: -85.05665 ymax: 34.26583 #> Geodetic CRS:  WGS 84 #> # A tibble: 6 × 4 #>   STATE_NAME STATE_FIPS STATE_ABBR                                      geometry #>   <chr>      <chr>      <chr>                                      <POLYGON [°]> #> 1 Alabama    01         AL         ((-86.82067 32.34731, -86.81446 32.37041, -8… #> 2 Alabama    01         AL         ((-87.97309 31.16482, -87.9371 31.17346, -87… #> 3 Alabama    01         AL         ((-85.74337 31.62624, -85.7172 31.67924, -85… #> 4 Alabama    01         AL         ((-87.41986 33.01177, -87.31532 33.0121, -87… #> 5 Alabama    01         AL         ((-86.96799 33.86045, -86.92667 33.87228, -8… #> 6 Alabama    01         AL         ((-85.4114 32.15551, -85.41136 32.14547, -85…"},{"path":"/index.html","id":"featureservers","dir":"","previous_headings":"","what":"FeatureServers","title":"What the Package Does (Title Case)","text":"FeatureServers contain one FeatureLayers Tables. Access elements ID get_layer() Get list elements.","code":"ft_srv <- feature_server(   \"https://services2.arcgis.com/j80Jz20at6Bi0thr/ArcGIS/rest/services/List_of_Providers/FeatureServer/\"   )  ft_srv #> <FeatureServer <2 Features>> #> CRS: 3857 #> Capabilities: Query #> ┌ Features ──────────────────────────────────────┐ #> │ 24: Adoption_Facilities (esriGeometryPolygon)  │ #> │ 27: Adoption_Org (Table)                       │ #> └────── List of adoption providers in each state ┘ get_layer(ft_srv, 27) #> <Table <281 features, 8 fields>> #> Name: Adoption_Org #> Capabilities: Query get_all_layers(ft_srv) #> $layers #> $layers$`24` #> <FeatureLayer <51 features, 9 fields>> #> Name: Adoption_Facilities #> Geometry Type: esriGeometryPolygon #> CRS: 3857 #> Capabilities: Query #>  #>  #> $tables #> $tables$`27` #> <Table <281 features, 8 fields>> #> Name: Adoption_Org #> Capabilities: Query"},{"path":"/index.html","id":"conversion-to-esri-json","dir":"","previous_headings":"","what":"Conversion to Esri JSON","title":"What the Package Does (Title Case)","text":"sf objects can converted Esri JSON representation. can Geometry Objects, FeatureSets, arrays Features. st_as_geometry() works objects class sfg creates Geometry Object. st_as_featureset() creates FeatureSet sf sfc object. sfc objects 0 length attributes. st_as_features() works sf sfc object.","code":"st_as_geometry(res[[\"geometry\"]][[30]]) |>    # print nicely with jsonify   jsonify::pretty_json() #> Registered S3 method overwritten by 'jsonify': #>   method     from     #>   print.json jsonlite #> { #>     \"hasZ\": false, #>     \"hasM\": false, #>     \"rings\": [ #>         [ #>             [ #>                 -87.5341266760964, #>                 34.3133458024783 #>             ], #>             [ #>                 -87.6337314942754, #>                 34.3127157099462 #>             ], #>             [ #>                 -88.1676133052101, #>                 34.3241475145521 #>             ], #>             [ #>                 -88.151256386964, #>                 34.4652733221692 #>             ], #>             [ #>                 -88.1364015786465, #>                 34.580497317268 #>             ], #>             [ #>                 -87.5304598825747, #>                 34.5677579787062 #>             ], #>             [ #>                 -87.5341266760964, #>                 34.3133458024783 #>             ] #>         ] #>     ], #>     \"spatialReference\": { #>         \"wkid\": 4326 #>     } #> } st_as_featureset(res[30,]) |>    jsonify::pretty_json() #> { #>     \"geometryType\": \"esriGeometryPolygon\", #>     \"spatialReference\": { #>         \"wkid\": 4326 #>     }, #>     \"hasZ\": false, #>     \"hasM\": false, #>     \"features\": [ #>         { #>             \"attributes\": { #>                 \"STATE_NAME\": \"Alabama\", #>                 \"STATE_FIPS\": \"01\", #>                 \"STATE_ABBR\": \"AL\" #>             }, #>             \"geometry\": { #>                 \"rings\": [ #>                     [ #>                         [ #>                             -87.5341266760964, #>                             34.3133458024783 #>                         ], #>                         [ #>                             -87.6337314942754, #>                             34.3127157099462 #>                         ], #>                         [ #>                             -88.1676133052101, #>                             34.3241475145521 #>                         ], #>                         [ #>                             -88.151256386964, #>                             34.4652733221692 #>                         ], #>                         [ #>                             -88.1364015786465, #>                             34.580497317268 #>                         ], #>                         [ #>                             -87.5304598825747, #>                             34.5677579787062 #>                         ], #>                         [ #>                             -87.5341266760964, #>                             34.3133458024783 #>                         ] #>                     ] #>                 ] #>             } #>         } #>     ] #> }"},{"path":"/reference/add_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Features to Feature Layer — add_features","title":"Add Features to Feature Layer — add_features","text":"Add Features Feature Layer","code":""},{"path":"/reference/add_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Features to Feature Layer — add_features","text":"","code":"add_features(   x,   .data,   rollback_on_fail = TRUE,   token = Sys.getenv(\"ARCGIS_TOKEN\") )"},{"path":"/reference/add_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Features to Feature Layer — add_features","text":"x object class FeatureLayer .data object class sf data.frame rollback_on_fail anything errors, roll back writes. Defaults TRUE token authorization token. default checks environment variable ARCGIS_TOKEN","code":""},{"path":"/reference/add_offset.html","id":null,"dir":"Reference","previous_headings":"","what":"This function takes a list of query parameters and creates a query request\nImportantly, this creates the paginated results that will be needed for\nFeature Layers with more than 2000 observations — add_offset","title":"This function takes a list of query parameters and creates a query request\nImportantly, this creates the paginated results that will be needed for\nFeature Layers with more than 2000 observations — add_offset","text":"function takes list query parameters creates query request Importantly, creates paginated results needed Feature Layers 2000 observations","code":""},{"path":"/reference/add_offset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function takes a list of query parameters and creates a query request\nImportantly, this creates the paginated results that will be needed for\nFeature Layers with more than 2000 observations — add_offset","text":"","code":"add_offset(offset, request, params)"},{"path":"/reference/auth.html","id":null,"dir":"Reference","previous_headings":"","what":"Authorization — auth_code","title":"Authorization — auth_code","text":"Authorize R session connect ArcGIS Portal. ArcGIS Online ArcGIS Enterprise utilize OAuth2 authorization flow.","code":""},{"path":"/reference/auth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Authorization — auth_code","text":"","code":"auth_code(   client = Sys.getenv(\"ARCGIS_CLIENT\"),   host = \"https://www.arcgis.com\" )  auth_client(   client = Sys.getenv(\"ARCGIS_CLIENT\"),   secret = Sys.getenv(\"ARCGIS_SECRET\"),   host = \"https://www.arcgis.com\",   expiration = 120 )  auth_password(   username = Sys.getenv(\"ARCGIS_USER\"),   password = Sys.getenv(\"ARCGIS_PASSWORD\"),   host = \"https://www.arcgis.com\",   expiration = 60 )  refresh_token(   token,   client = Sys.getenv(\"ARCGIS_CLIENT\"),   host = \"https://arcgis.com\" )  validate_or_refresh_token(   token,   client = Sys.getenv(\"ARCGIS_CLIENT\"),   host = \"https://arcgis.com\",   refresh_threshold = 0 )"},{"path":"/reference/auth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authorization — auth_code","text":"client OAuth 2.0 developer application client ID. default uses environment variable ARCGIS_CLIENT. host default \"https://www.arcgis.com secret OAuth 2.0 developer application secret. default uses environment variable ARCGIS_SECRET. expiration duration token minutes.","code":""},{"path":"/reference/auth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Authorization — auth_code","text":"Create OAuth2.0 ArcGIS Application https://developers.arcgis.com/applications/","code":""},{"path":"/reference/clear_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Cleary all query parameters — clear_query","title":"Cleary all query parameters — clear_query","text":"Cleary query parameters","code":""},{"path":"/reference/clear_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cleary all query parameters — clear_query","text":"","code":"clear_query(x)"},{"path":"/reference/collect.FeatureLayer.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect — collect.FeatureLayer","title":"Collect — collect.FeatureLayer","text":"Collect","code":""},{"path":"/reference/collect.FeatureLayer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect — collect.FeatureLayer","text":"","code":"# S3 method for FeatureLayer collect(x, geometry = TRUE, token = \"\", ...)"},{"path":"/reference/collect.FeatureLayer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Collect — collect.FeatureLayer","text":"Feature Layer method `collect()` overwrite `returnGeometry` parameter set `update_params()`. Use `geometry` argument `collect()` set parameter.","code":""},{"path":"/reference/collect.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect — collect","title":"Collect — collect","text":"Collect","code":""},{"path":"/reference/collect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect — collect","text":"","code":"collect(x, ...)"},{"path":"/reference/compact.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove any null elements from a list — compact","title":"Remove any null elements from a list — compact","text":"Remove null elements list","code":""},{"path":"/reference/compact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove any null elements from a list — compact","text":"","code":"compact(.x)"},{"path":"/reference/count_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the number of features in a feature layer — count_features","title":"Count the number of features in a feature layer — count_features","text":"Count number features feature layer","code":""},{"path":"/reference/count_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the number of features in a feature layer — count_features","text":"","code":"count_features(request, token)"},{"path":"/reference/count_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the number of features in a feature layer — count_features","text":"request base request created feature layer url.","code":""},{"path":"/reference/count_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count the number of features in a feature layer — count_features","text":"numeric total number features feature layer","code":""},{"path":"/reference/dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Date handling — is_date","title":"Date handling — is_date","text":"Date handling","code":""},{"path":"/reference/dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date handling — is_date","text":"","code":"is_date(x)  date_to_ms(x, tz = \"UTC\")"},{"path":"/reference/dates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Date handling — is_date","text":"is_date() checks see object date date_to_ms() converts date miliseconds Unix Epoch","code":""},{"path":"/reference/delete_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete Features from Feature Layer — delete_features","title":"Delete Features from Feature Layer — delete_features","text":"Delete features feature layer based object ID, clause, spatial filter.","code":""},{"path":"/reference/delete_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete Features from Feature Layer — delete_features","text":"","code":"delete_features(   x,   object_ids,   where,   filter_geom,   predicate = \"intersects\",   rollback_on_fail = TRUE,   token = Sys.getenv(\"ARCGIS_TOKEN\"),   ... )"},{"path":"/reference/delete_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete Features from Feature Layer — delete_features","text":"x FeatureLayer object_ids numeric vector object IDs deleted. simple SQL statement indicating features deleted. statement evaluates TRUE, values deleted. filter_geom sfc sfg object. sfc length must one. predicate deault \"intersects\". spatial predicate used spatial filter. Ignored filter_geom provided. rollback_on_fail default TRUE. Specifies whether edits applied submitted edits succeed. token authorization token. default uses environment variable ARCGIS_TOKEN set set_auth_token().","code":""},{"path":"/reference/detect_errors.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect errors in parsed json response — detect_errors","title":"Detect errors in parsed json response — detect_errors","text":"requests responses ArcGIS return status code response rather body json. function checks existence error field.","code":""},{"path":"/reference/detect_errors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect errors in parsed json response — detect_errors","text":"","code":"detect_errors(response)"},{"path":"/reference/determine_dims.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the dimensions of a geometry object — determine_dims","title":"Determine the dimensions of a geometry object — determine_dims","text":"Given sfc sfg object determine dimensions represented.","code":""},{"path":"/reference/determine_dims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the dimensions of a geometry object — determine_dims","text":"","code":"determine_dims(x)  # S3 method for sfc determine_dims(x)  # S3 method for sfg determine_dims(x)"},{"path":"/reference/determine_dims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the dimensions of a geometry object — determine_dims","text":"scalar character value \"xy\", \"xyz\", \"xyzm\" depending dimensions represented.","code":""},{"path":"/reference/dplyr.html","id":null,"dir":"Reference","previous_headings":"","what":"dplyr methods — select.FeatureLayer","title":"dplyr methods — select.FeatureLayer","text":"dplyr methods","code":""},{"path":"/reference/dplyr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dplyr methods — select.FeatureLayer","text":"","code":"select.FeatureLayer(x, ...)  select.Table(x, ...)  filter.FeatureLayer(x, ...)  filter.Table(x, ...)  collect.FeatureLayer(x, n_max = Inf, token = Sys.getenv(\"ARCGIS_TOKEN\"), ...)"},{"path":"/reference/dplyr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"dplyr methods — select.FeatureLayer","text":"Feature Layer method collect() overwrite returnGeometry parameter set update_params(). Use geometry argument collect() set parameter.","code":""},{"path":"/reference/feature_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Feature Layer Object — feature_layer","title":"Create a Feature Layer Object — feature_layer","text":"Ideally, can use s3 object build queries","code":""},{"path":"/reference/feature_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Feature Layer Object — feature_layer","text":"","code":"feature_layer(url, token = Sys.getenv(\"ARCGIS_TOKEN\"))"},{"path":"/reference/feature_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Feature Layer Object — feature_layer","text":"url url feature layer token authorization token provided auth_client() auth_code()","code":""},{"path":"/reference/feature_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Feature Layer Object — feature_layer","text":"","code":"library(arcgis) furl <- \"https://services.arcgis.com/P3ePLMYs2RVChkJx/ArcGIS/rest/services/USA_Counties_Generalized_Boundaries/FeatureServer/0\" county_fl <- feature_layer(furl) #> Error in .deserialize_json(json = json, query = query, empty_array = empty_array,     empty_object = empty_object, single_null = single_null, parse_error_ok = parse_error_ok,     on_parse_error = on_parse_error, query_error_ok = query_error_ok,     on_query_error = on_query_error, simplify_to = max_simplify_lvl,     type_policy = type_policy, int64_r_type = int64_policy): The JSON field referenced does not exist in this object."},{"path":"/reference/feature_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a feature server — feature_server","title":"Create a feature server — feature_server","text":"Create feature server","code":""},{"path":"/reference/feature_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a feature server — feature_server","text":"","code":"feature_server(url, token = Sys.getenv(\"ARCGIS_TOKEN\"))"},{"path":"/reference/feature_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a feature server — feature_server","text":"url url feature server","code":""},{"path":"/reference/feature_server.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a feature server — feature_server","text":"","code":"url <- \"https://services2.arcgis.com/j80Jz20at6Bi0thr/ArcGIS/rest/services/hexagons_state/FeatureServer\" feature_server(url) #> <FeatureServer <0 Features>> #> Error in character(nrow(lyr)): invalid 'length' argument"},{"path":"/reference/feature_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature Table — feature_table","title":"Feature Table — feature_table","text":"Feature Table","code":""},{"path":"/reference/feature_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Table — feature_table","text":"","code":"feature_table(url, token = \"\")"},{"path":"/reference/feature_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Feature Table — feature_table","text":"","code":"tbl_url <- \"https://services2.arcgis.com/j80Jz20at6Bi0thr/ArcGIS/rest/services/List_of_Providers/FeatureServer/27\" feature_table(tbl_url) #> <Table <281 features, 8 fields>> #> Name: Adoption_Org #> Capabilities: Query"},{"path":"/reference/featureset_geometry.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object to featureset list structure — featureset_geometry","title":"Convert an object to featureset list structure — featureset_geometry","text":"output intended passed jsonify::to_json()","code":""},{"path":"/reference/featureset_geometry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object to featureset list structure — featureset_geometry","text":"","code":"featureset_geometry(x)"},{"path":"/reference/featureset_geometry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object to featureset list structure — featureset_geometry","text":"x object class sfc sf","code":""},{"path":"/reference/fetch_layer_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve metadata for a feature layer — fetch_layer_metadata","title":"Retrieve metadata for a feature layer — fetch_layer_metadata","text":"Retrieve metadata feature layer","code":""},{"path":"/reference/fetch_layer_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve metadata for a feature layer — fetch_layer_metadata","text":"","code":"fetch_layer_metadata(request, token)"},{"path":"/reference/fetch_layer_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve metadata for a feature layer — fetch_layer_metadata","text":"request httr2 request object. base_req object created provided feature layer url","code":""},{"path":"/reference/field_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a lazy frame prototype — remote_ptype_tbl","title":"Create a lazy frame prototype — remote_ptype_tbl","text":"Given fields feature layer create lazy frame name field names corresponding R type. Used partial_eval","code":""},{"path":"/reference/field_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a lazy frame prototype — remote_ptype_tbl","text":"","code":"remote_ptype_tbl(fields)  get_ptype(field_type)"},{"path":"/reference/field_mapping.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a lazy frame prototype — remote_ptype_tbl","text":"get_ptype() takes scalar character containing Esri field type returns prototype pertinent R type remote_ptype_tbl() takes data frame fields derived list_fields() creates lazy table","code":""},{"path":"/reference/filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter methods — filter","title":"Filter methods — filter","text":"Filter methods","code":""},{"path":"/reference/filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter methods — filter","text":"","code":"filter(x, ...)  # S3 method for FeatureLayer filter(x, ...)  # S3 method for Table filter(x, ...)"},{"path":"/reference/get_feature.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a feature layer — get_feature","title":"Extract a feature layer — get_feature","text":"Feature Server, extract feature layer.","code":""},{"path":"/reference/get_feature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a feature layer — get_feature","text":"","code":"get_feature(x, id = 0, token = \"\")  get_all_features(x, token = \"\")"},{"path":"/reference/get_feature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a feature layer — get_feature","text":"`get_feature()` returns single `FeatureLayer` based ID `get_all_features()` returns named `list` element `layers` `tables`. list containing `FeatureLayer` `Table`s respectively.","code":""},{"path":"/reference/get_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a feature layer — get_layer","title":"Extract a feature layer — get_layer","text":"Feature Server, extract feature layer.","code":""},{"path":"/reference/get_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a feature layer — get_layer","text":"","code":"get_layer(x, id = 0, token = \"\")  get_all_layers(x, token = \"\")"},{"path":"/reference/get_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a feature layer — get_layer","text":"get_layer() returns single FeatureLayer Table based ID get_all_layers() returns named list element layers tables. list containing FeatureLayer Tables respectively.","code":""},{"path":"/reference/head.FeatureLayer.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch n rows from a feature layer — head.FeatureLayer","title":"Fetch n rows from a feature layer — head.FeatureLayer","text":"Fetch n rows feature layer","code":""},{"path":"/reference/head.FeatureLayer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch n rows from a feature layer — head.FeatureLayer","text":"","code":"# S3 method for FeatureLayer head(x, n = 6, token = \"\", ...)"},{"path":"/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, World! — hello","title":"Hello, World! — hello","text":"Prints 'Hello, world!'.","code":""},{"path":"/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, World! — hello","text":"","code":"hello()"},{"path":"/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, World! — hello","text":"","code":"hello() #> Error in hello(): could not find function \"hello\""},{"path":"/reference/image_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Image Server Representation — image_server","title":"Image Server Representation — image_server","text":"Image Server Representation","code":""},{"path":"/reference/image_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Image Server Representation — image_server","text":"","code":"image_server(url, token = \"\")"},{"path":"/reference/infer_esri_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Given a data frame infer the esri field types — infer_esri_type","title":"Given a data frame infer the esri field types — infer_esri_type","text":"Given data frame infer esri field types","code":""},{"path":"/reference/infer_esri_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Given a data frame infer the esri field types — infer_esri_type","text":"","code":"infer_esri_type(.data)"},{"path":"/reference/list_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"List fields in a a feature layer — list_fields","title":"List fields in a a feature layer — list_fields","text":"List fields feature layer","code":""},{"path":"/reference/list_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List fields in a a feature layer — list_fields","text":"","code":"list_fields(x)"},{"path":"/reference/make_offset_reqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create paginated requests — make_offset_reqs","title":"Create paginated requests — make_offset_reqs","text":"feature layer, create list requests use appropriate offsets. allows us paginate rather create requests parallel httr2::multi_req_perform.","code":""},{"path":"/reference/make_offset_reqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create paginated requests — make_offset_reqs","text":"","code":"make_offset_reqs(request, offsets)"},{"path":"/reference/make_offset_reqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create paginated requests — make_offset_reqs","text":"request base request created feature layer url. offsets vector offsets. Used create multiple requests requisite page.","code":""},{"path":"/reference/make_sf_compat.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast geos geometry to sfc object — make_sf_compat","title":"Cast geos geometry to sfc object — make_sf_compat","text":"geos geometry used directly sf must converted. Conversion using sf slow. function checks types geometries geojson casts \"\" (e.g. polygon multipolygon) necessary sets propery geometry type sf. casts sf. saves lot time.","code":""},{"path":"/reference/make_sf_compat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast geos geometry to sfc object — make_sf_compat","text":"","code":"make_sf_compat(geometry)"},{"path":"/reference/make_sf_compat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast geos geometry to sfc object — make_sf_compat","text":"geom_types","code":""},{"path":"/reference/make_sf_compat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cast geos geometry to sfc object — make_sf_compat","text":"Based https://github.com/paleolimbot/geos/issues/80.","code":""},{"path":"/reference/prepare_spatial_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare json for spatial filters — prepare_spatial_filter","title":"Prepare json for spatial filters — prepare_spatial_filter","text":"Prepare json spatial filters","code":""},{"path":"/reference/prepare_spatial_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare json for spatial filters — prepare_spatial_filter","text":"","code":"prepare_spatial_filter(x, y, predicate)"},{"path":"/reference/prepare_spatial_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare json for spatial filters — prepare_spatial_filter","text":"x FeatureLayer y sf object","code":""},{"path":"/reference/prettify_param.html","id":null,"dir":"Reference","previous_headings":"","what":"function to make printing easier — prettify_param","title":"function to make printing easier — prettify_param","text":"function takes parameter name query list trims element fit contents window.","code":""},{"path":"/reference/prettify_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"function to make printing easier — prettify_param","text":"","code":"prettify_param(param, query)"},{"path":"/reference/print.FeatureLayer.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for feature layer objects — print.FeatureLayer","title":"Print method for feature layer objects — print.FeatureLayer","text":"Print method feature layer objects","code":""},{"path":"/reference/print.FeatureLayer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for feature layer objects — print.FeatureLayer","text":"","code":"# S3 method for FeatureLayer print(x, ...)"},{"path":"/reference/print.ImageServer.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method — print.ImageServer","title":"Print Method — print.ImageServer","text":"Print Method","code":""},{"path":"/reference/print.ImageServer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method — print.ImageServer","text":"","code":"# S3 method for ImageServer print(x, ...)"},{"path":"/reference/query_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a feature layer — query_layer","title":"Retrieve a feature layer — query_layer","text":"Give FeatureLayer Table object, retrieve data sf object tibble resepctively.","code":""},{"path":"/reference/query_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a feature layer — query_layer","text":"","code":"query_layer(   x,   fields,   where,   crs = sf::st_crs(x),   filter_geom,   predicate = \"intersects\",   n_max = Inf,   ... )"},{"path":"/reference/query_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a feature layer — query_layer","text":"x object class FeatureLayer Table. fields character vector field names wish returned. default fields returned. crs spatial reference returned. CRS different FeatureLayer's CRS, transformation occur server-side. Ignored Table objects. filter_geom object class sfc sfg used filter query results based predicate function. sfc object provided transformed layers spatial reference. sfc missing CRS (sfg object) assumed layers spatial reference. predicate default \"intersects\". Possible options \"intersects\",  \"contains\",  \"crosses\",  \"overlaps\",  \"touches\", \"within\". n_max maximum number features return. default returns every feature available. Unused moment. ... additional query parameters passed update_params(). See reference documentation possible arguments.","code":""},{"path":"/reference/read_fl_page.html","id":null,"dir":"Reference","previous_headings":"","what":"Read geojson string response — read_fl_page","title":"Read geojson string response — read_fl_page","text":"collect() performs multiple queries time. query parsed using function. function first reads geojson fields. geometry present skips reading geos returns data frame. goeometry present, reads geos","code":""},{"path":"/reference/read_fl_page.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read geojson string response — read_fl_page","text":"","code":"read_fl_page(geojson, crs)"},{"path":"/reference/refresh_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Refresh layer — refresh_layer","title":"Refresh layer — refresh_layer","text":"Useful update metadata modifying remote","code":""},{"path":"/reference/refresh_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Refresh layer — refresh_layer","text":"","code":"refresh_layer(x)"},{"path":"/reference/st_as_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Esri FeatureSet JSON — st_as_features","title":"Create Esri FeatureSet JSON — st_as_features","text":"Represent simple features Esri JSON. functions convert R objects Esri json representations. three types representations. , smallest largest, geometry object, feature feature set.","code":""},{"path":"/reference/st_as_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Esri FeatureSet JSON — st_as_features","text":"","code":"st_as_features(x, ...)  st_as_featureset(x, ...)  st_as_json(x, crs, ...)"},{"path":"/reference/st_as_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Esri FeatureSet JSON — st_as_features","text":"x object class sfg ... unused crs CRS ID, crs object, well-known text representation CRS","code":""},{"path":"/reference/st_as_json.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Esri FeatureSet JSON — st_as_features","text":"st_as_json() converts sfg object geometry object st_as_features() converts sfc sf object list features st_as_featureset() converts sf, sfc, data.frame feature set object Geometry object contain coordinates geometry. Features geometries associated attributes . similar row sf object. FeatureSets list features additional metadata fields spatialReference, geomtryType, fields. FeatureSets correspond sf object. Geometry objects defined 5 different types. : Point: esriGeometryPoint Multipoint: esriGeometryMultipoint Polyline: esriGeometryPolyline note polyline encompasses LINESTRING MULTILINESTRING Polygon: esriGeometryPolygon note polygon encompasses POLYGON MULTIPOLYGON Envelope: esriGeometryEnvelope envelopes correspond bounding boxes can Z dimension","code":""},{"path":"/reference/st_as_json.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Esri FeatureSet JSON — st_as_features","text":"","code":"library(sf) #> Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.1; sf_use_s2() is TRUE st_as_json(st_point(c(0, 1, 3, 4))) #> {\"hasZ\":true,\"hasM\":true,\"x\":0.0,\"y\":1.0,\"z\":3.0,\"m\":4.0,\"spatialReference\":{\"wkid\":4326}} st_as_json(st_multipoint(x = matrix(runif(4), ncol = 2))) #> {\"hasZ\":false,\"hasM\":false,\"points\":[[0.8853790711145848,0.20541643188335002],[0.19411082635633648,0.6049823090434074]],\"spatialReference\":{\"wkid\":4326}} st_as_json(st_linestring(x = matrix(runif(2), ncol = 2))) #> {\"hasZ\":false,\"hasM\":false,\"paths\":[[0.6975813247263432,0.9091675197705627]],\"spatialReference\":{\"wkid\":4326}} st_as_json(st_linestring(x = matrix(runif(2), ncol = 2))) #> {\"hasZ\":false,\"hasM\":false,\"paths\":[[0.06757986918091774,0.10631556552834809]],\"spatialReference\":{\"wkid\":4326}}  # polygon m <- matrix(   c(0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 2, 2, 1, 2, 3, 1, 3, 2, 0, 0, 0),   ncol = 3,   byrow = TRUE ) st_as_json(st_polygon(list(m))) #> {\"hasZ\":true,\"hasM\":false,\"rings\":[[[0.0,0.0,0.0],[0.0,0.0,1.0],[0.0,1.0,1.0],[1.0,2.0,2.0],[1.0,2.0,3.0],[1.0,3.0,2.0],[0.0,0.0,0.0]]],\"spatialReference\":{\"wkid\":4326}}"},{"path":"/reference/st_envelope.html","id":null,"dir":"Reference","previous_headings":"","what":"Return an envelope of a simple feature or simple feature set — st_envelope","title":"Return an envelope of a simple feature or simple feature set — st_envelope","text":"Return envelope simple feature simple feature set","code":""},{"path":"/reference/st_envelope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return an envelope of a simple feature or simple feature set — st_envelope","text":"","code":"st_envelope(x, crs)  # S3 method for sfc st_envelope(x, crs = sf::st_crs(x))  # S3 method for sf st_envelope(x, crs = sf::st_crs(x))  # S3 method for sfg st_envelope(x, crs = 4326)  new_envelope(x, crs)  # S3 method for envelope print(x, digits = 4, ...)"},{"path":"/reference/st_envelope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return an envelope of a simple feature or simple feature set — st_envelope","text":"x object class sfg, sfc, sf","code":""},{"path":"/reference/st_envelope.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return an envelope of a simple feature or simple feature set — st_envelope","text":"envelope much like bounding box. fact, bounding box data two dimensional. envelope records mimimum maximum's dimension. 2D space xmin, ymin, xmax, ymax. Z M dimension present, also records min maxes well.","code":""},{"path":"/reference/st_envelope.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return an envelope of a simple feature or simple feature set — st_envelope","text":"","code":"st_envelope(sf::st_point()) #> xmin ymin xmax ymax  #>   NA   NA   NA   NA"},{"path":"/reference/update_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify Query Parameters — update_params","title":"Modify Query Parameters — update_params","text":"Modify Query Parameters","code":""},{"path":"/reference/update_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify Query Parameters — update_params","text":"","code":"update_params(x, ...)"},{"path":"/reference/update_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify Query Parameters — update_params","text":"x FeatureLayer object ... key value pairs query parameters values.","code":""}]
