[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Josiah Parry. Author, maintainer. Eli Pousson. Contributor. Kenneth Vernon. Contributor. Martha Bass. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Parry J (2024). arcgislayers: Interface ArcGIS Data Services. R package version 0.3.1.9000, https://github.com/R-ArcGIS/arcgislayers, https://r.esri.com/arcgislayers/.","code":"@Manual{,   title = {arcgislayers: An Interface to ArcGIS Data Services},   author = {Josiah Parry},   year = {2024},   note = {R package version 0.3.1.9000, https://github.com/R-ArcGIS/arcgislayers},   url = {https://r.esri.com/arcgislayers/}, }"},{"path":"/index.html","id":"arcgislayers-","dir":"","previous_headings":"","what":"An Interface to ArcGIS Data Services","title":"An Interface to ArcGIS Data Services","text":"goal arcgislayers provide R interface ArcGIS REST API.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An Interface to ArcGIS Data Services","text":"recommend install use metapackage {arcgis}. can install development version arcgis like :","code":"remotes::install_github(\"r-arcgis/arcgis\", dependencies = TRUE)"},{"path":[]},{"path":"/index.html","id":"creating-a-simple-feature-object-from-an-arcgis-featurelayer","dir":"","previous_headings":"Usage","what":"Creating a simple feature object from an ArcGIS FeatureLayer","title":"An Interface to ArcGIS Data Services","text":"arc_open() takes URL create reference remote ArcGIS layer, server, table. function can return following classes (corresponding different ArcGIS service types): FeatureLayer Table FeatureServer ImageServer MapServer GroupLayer example, can create FeatureLayer object based Feature Server URL: can use arc_select() query feature layer object return sf object. arguments provided arc_select() entire feature layer returned memory sf object.","code":"library(arcgis) #> Attaching core arcgis packages: #> → arcgisutils v0.3.0 #> → arcgislayers v0.3.0 #> → arcgisgeocode v0.1.3 #> → arcgisplaces v0.1.0 furl <- \"https://services.arcgis.com/P3ePLMYs2RVChkJx/ArcGIS/rest/services/USA_Counties_Generalized_Boundaries/FeatureServer/0\"  county_fl <- arc_open(furl)  county_fl #> <FeatureLayer> #> Name: USA Counties - Generalized #> Geometry Type: esriGeometryPolygon #> CRS: 4326 #> Capabilities: Query,Extract arc_select(county_fl) #> Simple feature collection with 3143 features and 12 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -178.2176 ymin: 18.92179 xmax: -66.96927 ymax: 71.40624 #> Geodetic CRS:  WGS 84 #> First 10 features: #>    OBJECTID            NAME STATE_NAME STATE_FIPS  FIPS    SQMI #> 1         1  Autauga County    Alabama         01 01001  604.37 #> 2         2  Baldwin County    Alabama         01 01003 1633.14 #> 3         3  Barbour County    Alabama         01 01005  904.52 #> 4         4     Bibb County    Alabama         01 01007  626.17 #> 5         5   Blount County    Alabama         01 01009  650.63 #> 6         6  Bullock County    Alabama         01 01011  625.14 #> 7         7   Butler County    Alabama         01 01013  777.88 #> 8         8  Calhoun County    Alabama         01 01015  612.27 #> 9         9 Chambers County    Alabama         01 01017  603.11 #> 10       10 Cherokee County    Alabama         01 01019  599.98 #>             POPULATION POP_SQMI STATE_ABBR COUNTY_FIPS Shape__Area #> 1  1970-01-01 11:20:05     97.3         AL         001   0.1489034 #> 2  1970-01-03 11:22:47    141.9         AL         003   0.4044891 #> 3  1970-01-01 02:00:23     27.9         AL         005   0.2224307 #> 4  1970-01-01 01:11:33     35.6         AL         007   0.1577359 #> 5  1970-01-01 11:25:34     90.9         AL         009   0.1675296 #> 6  1969-12-31 21:52:37     16.6         AL         011   0.1557273 #> 7  1970-01-01 00:17:31     24.5         AL         013   0.1927305 #> 8  1970-01-02 03:20:41    190.2         AL         015   0.1523369 #> 9  1970-01-01 04:39:32     57.7         AL         017   0.1531136 #> 10 1970-01-01 01:56:11     41.6         AL         019   0.1527217 #>    Shape__Length                       geometry #> 1       1.884137 POLYGON ((-86.82067 32.3473... #> 2       3.678276 POLYGON ((-87.97309 31.1648... #> 3       2.218514 POLYGON ((-85.74337 31.6262... #> 4       1.852453 POLYGON ((-87.41986 33.0117... #> 5       2.067456 POLYGON ((-86.96799 33.8604... #> 6       2.006250 POLYGON ((-85.4114 32.15551... #> 7       1.769462 POLYGON ((-86.44912 31.9712... #> 8       2.149825 POLYGON ((-85.79353 33.5634... #> 9       1.637226 POLYGON ((-85.58963 32.7313... #> 10      1.794142 POLYGON ((-85.41657 34.0869..."},{"path":"/index.html","id":"filtering-using-where-or-filter_geom-arguments","dir":"","previous_headings":"Usage","what":"Filtering using where or filter_geom arguments","title":"An Interface to ArcGIS Data Services","text":"can also use fields argument select columns argument subset rows. example, using character vector column names fields simple SQL clause can select counties population greater 1,000,000: FeatureLayer Table objects, sometimes ImageServers, list_fields() function can helpful check available attributes build query: can also provide bbox, sfc, sfg object filter_geom argument perform spatial filter. sfc object contains one geometry, object combined sf::st_union(). See documentation (?arc_select).","code":"arc_select(   county_fl,    fields = c(\"state_abbr\", \"population\"),    where = \"population > 1000000\" ) #> Simple feature collection with 49 features and 2 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -158.2674 ymin: 21.24986 xmax: -71.02671 ymax: 47.77552 #> Geodetic CRS:  WGS 84 #> First 10 features: #>    STATE_ABBR          POPULATION                       geometry #> 1          AZ 1970-02-20 22:56:08 POLYGON ((-111.0425 33.4759... #> 2          AZ 1970-01-12 20:50:33 POLYGON ((-110.4522 31.7360... #> 3          CA 1970-01-20 06:19:13 POLYGON ((-121.4721 37.4777... #> 4          CA 1970-01-14 06:52:07 POLYGON ((-122.3076 37.8917... #> 5          CA 1970-01-12 11:10:54 POLYGON ((-120.6636 36.2787... #> 6          CA 1970-04-26 17:40:09 POLYGON ((-118.1067 33.7475... #> 7          CA 1970-02-06 16:16:29 POLYGON ((-117.509 33.50848... #> 8          CA 1970-01-28 18:43:05 POLYGON ((-116.0824 33.4258... #> 9          CA 1970-01-19 03:17:35 POLYGON ((-121.6652 38.1692... #> 10         CA 1970-01-26 01:00:54 POLYGON ((-117.7832 33.9507... list_fields(county_fl) #>             name                 type                  alias       sqlType #> 1       OBJECTID     esriFieldTypeOID               OBJECTID  sqlTypeOther #> 2           NAME  esriFieldTypeString                   Name  sqlTypeOther #> 3     STATE_NAME  esriFieldTypeString             State Name  sqlTypeOther #> 4     STATE_FIPS  esriFieldTypeString             State FIPS  sqlTypeOther #> 5           FIPS  esriFieldTypeString                   FIPS  sqlTypeOther #> 6           SQMI  esriFieldTypeDouble   Area in square miles  sqlTypeOther #> 7     POPULATION esriFieldTypeInteger  2020 Total Population  sqlTypeOther #> 8       POP_SQMI  esriFieldTypeDouble People per square mile  sqlTypeOther #> 9     STATE_ABBR  esriFieldTypeString     State Abbreviation  sqlTypeOther #> 10   COUNTY_FIPS  esriFieldTypeString            County FIPS  sqlTypeOther #> 11   Shape__Area  esriFieldTypeDouble            Shape__Area sqlTypeDouble #> 12 Shape__Length  esriFieldTypeDouble          Shape__Length sqlTypeDouble #>    nullable editable domain defaultValue length #> 1     FALSE    FALSE     NA           NA     NA #> 2      TRUE     TRUE     NA           NA     50 #> 3      TRUE     TRUE     NA           NA     20 #> 4      TRUE     TRUE     NA           NA      2 #> 5      TRUE     TRUE     NA           NA      5 #> 6      TRUE     TRUE     NA           NA     NA #> 7      TRUE     TRUE     NA           NA     NA #> 8      TRUE     TRUE     NA           NA     NA #> 9      TRUE     TRUE     NA           NA      2 #> 10     TRUE     TRUE     NA           NA      3 #> 11     TRUE    FALSE     NA           NA     NA #> 12     TRUE    FALSE     NA           NA     NA #>                                                                                                                                                                                                                 description #> 1                                                                                                                                                                                                                      <NA> #> 2                                                                                                                                                        {\"value\":\"The name of the county.\",\"fieldValueType\":\"nameOrTitle\"} #> 3                                                                                                                         {\"value\":\"The name for the state in which the county is located.\",\"fieldValueType\":\"nameOrTitle\"} #> 4                                                                                                 {\"value\":\"The code (two-digit number) for the state in which the county is located.\",\"fieldValueType\":\"uniqueIdentifier\"} #> 5  {\"value\":\"The combined state and county codes. County codes begin with 001 for each state; use the combined code (five-digit number) to uniquely identify a county in the country.\",\"fieldValueType\":\"uniqueIdentifier\"} #> 6                                                                             {\"value\":\"The area of the county in square miles using the North America Albers Equal Area Conic projection.\",\"fieldValueType\":\"measurement\"} #> 7                                                                                                                                           {\"value\":\"The 2020 population of the county.\",\"fieldValueType\":\"countOrAmount\"} #> 8                                                                                                                             {\"value\":\"The 2020 population of the county per square mile.\",\"fieldValueType\":\"measurement\"} #> 9                                                                                                 {\"value\":\"The two-letter abbreviation for the state in which the county is located.\",\"fieldValueType\":\"uniqueIdentifier\"} #> 10                                                                                                                            {\"value\":\"The code (three-digit number) for the county.\",\"fieldValueType\":\"uniqueIdentifier\"} #> 11                                                                                                                                                                                                                     <NA> #> 12                                                                                                                                                                                                                     <NA> nc <- sf::st_read(system.file(\"shape/nc.shp\", package=\"sf\")) #> Reading layer `nc' from data source  #>   `/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/sf/shape/nc.shp'  #>   using driver `ESRI Shapefile' #> Simple feature collection with 100 features and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 #> Geodetic CRS:  NAD27 arc_select(   county_fl,   filter_geom = sf::st_bbox(nc[1,]) ) #> Simple feature collection with 6 features and 12 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -82.0477 ymin: 35.98946 xmax: -80.83795 ymax: 36.80746 #> Geodetic CRS:  WGS 84 #>   OBJECTID             NAME     STATE_NAME STATE_FIPS  FIPS   SQMI #> 1     1890 Alleghany County North Carolina         37 37005 236.26 #> 2     1892      Ashe County North Carolina         37 37009 429.38 #> 3     1982   Watauga County North Carolina         37 37189 313.32 #> 4     1984    Wilkes County North Carolina         37 37193 756.33 #> 5     2471   Johnson County      Tennessee         47 47091 302.69 #> 6     2855   Grayson County       Virginia         51 51077 445.57 #>            POPULATION POP_SQMI STATE_ABBR COUNTY_FIPS Shape__Area Shape__Length #> 1 1969-12-31 22:01:28     46.1         NC         005  0.06140165      1.231232 #> 2 1970-01-01 02:22:57     61.9         NC         009  0.11428581      1.442112 #> 3 1970-01-01 10:01:26    172.6         NC         189  0.08142272      1.287674 #> 4 1970-01-01 13:19:29     87.2         NC         193  0.19911944      1.984232 #> 5 1969-12-31 23:59:08     59.3         TN         091  0.07960385      1.290607 #> 6 1969-12-31 23:15:33     34.4         VA         077  0.11578917      1.945424 #>                         geometry #> 1 POLYGON ((-81.2397 36.36549... #> 2 POLYGON ((-81.47258 36.2344... #> 3 POLYGON ((-81.80605 36.1046... #> 4 POLYGON ((-81.02037 36.0350... #> 5 POLYGON ((-81.74091 36.3919... #> 6 POLYGON ((-81.34512 36.5729..."},{"path":"/index.html","id":"creating-a-spatraster-from-an-arcgis-imageserver","dir":"","previous_headings":"Usage","what":"Creating a SpatRaster from an ArcGIS ImageServer","title":"An Interface to ArcGIS Data Services","text":"SpatRaster object terra package can extracted ImageServer using arc_raster(). arc_raster() extract area defined xmin, ymin, xmax, ymax. can optionally specify width height resultant image. Use format define type image returned.","code":"img_url <- \"https://landsat2.arcgis.com/arcgis/rest/services/Landsat/MS/ImageServer\"  landsat <- arc_open(img_url)  res <- arc_raster(   landsat,    xmin = -71, ymin = 43,    xmax = -67, ymax = 47.5,    bbox_crs = 4326,    width = 500, height = 500 )  terra::plotRGB(res, 4, 3, 2, scale = max(landsat[[\"maxValues\"]]))"},{"path":"/index.html","id":"authorization-and-publication","dir":"","previous_headings":"","what":"Authorization and publication","title":"An Interface to ArcGIS Data Services","text":"Authorization required reading public data sources. Workflows require authorization include: interacting non-public services, publishing new service (authorized user must also publishing privileges), modifying deleting existing service (authorized user must also edit access service).","code":""},{"path":"/index.html","id":"accessing-non-public-data","dir":"","previous_headings":"Authorization and publication","what":"Accessing non-public data","title":"An Interface to ArcGIS Data Services","text":"functions reading public ArcGIS Online Enterprise services (arc_open(),arc_read(),arc_select(),arc_raster(), etc.) can used read data non-public services using token argument. information tokens authorization functions, see authorization article.","code":""},{"path":"/index.html","id":"publishing-and-modifying-services-from-r","dir":"","previous_headings":"Authorization and publication","what":"Publishing and modifying services from R","title":"An Interface to ArcGIS Data Services","text":"package includes functions publish data ArcGIS Portal: add_item(): Creates new FeatureCollection sf data.frame object publish_item(): Publishes existing FeatureLayer publish_layer(): higher level wrapper around add_item() publish_item() also functions add modify data including add_features(), update_features(), delete_features(). detailed guide adding, updating, deleting features, view tutorial R-ArcGIS Bridge website. functions require authorization since data published modified anonymously ArcGIS Online ArcGIS Enterprise.","code":""},{"path":"/reference/arc_open.html","id":null,"dir":"Reference","previous_headings":"","what":"Open connection to remote resource — arc_open","title":"Open connection to remote resource — arc_open","text":"Provided URL, create object referencing remote resource. resultant object acts reference remote data source.","code":""},{"path":"/reference/arc_open.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open connection to remote resource — arc_open","text":"","code":"arc_open(url, token = arc_token())"},{"path":"/reference/arc_open.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open connection to remote resource — arc_open","text":"url url remote resource. Must length one. token authorization token.","code":""},{"path":"/reference/arc_open.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open connection to remote resource — arc_open","text":"Depending provided URL returns FeatureLayer, Table, FeatureServer, ImageServer, MapServer. objects named list containing properties service.","code":""},{"path":"/reference/arc_open.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Open connection to remote resource — arc_open","text":"extract data remote resource utilize arc_select() objects class FeatureLayer Table. ImageServers, utilize arc_raster().","code":""},{"path":[]},{"path":"/reference/arc_open.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open connection to remote resource — arc_open","text":"","code":"if (FALSE) { # \\dontrun{ # FeatureLayer furl <- paste0(   \"https://services3.arcgis.com/ZvidGQkLaDJxRSJ2/arcgis/rest/services/\",   \"PLACES_LocalData_for_BetterHealth/FeatureServer/0\" )  arc_open(furl)  # Table furl <- paste0(   \"https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/\",   \"USA_Wetlands/FeatureServer/1\" )  arc_open(furl)  # ImageServer arc_open(   \"https://landsat2.arcgis.com/arcgis/rest/services/Landsat/MS/ImageServer\" )  # FeatureServer furl <- paste0(   \"https://services3.arcgis.com/ZvidGQkLaDJxRSJ2/arcgis/rest/services/\",   \"PLACES_LocalData_for_BetterHealth/FeatureServer\" )  arc_open(furl)  # MapServer map_url <- paste0(   \"https://services.arcgisonline.com/ArcGIS/rest/services/\",   \"World_Imagery/MapServer\" )  arc_open(map_url) } # }"},{"path":"/reference/arc_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Read from an Image Server — arc_raster","title":"Read from an Image Server — arc_raster","text":"Given ImageServer export image terra SpatRaster object. See terra::rast.","code":""},{"path":"/reference/arc_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read from an Image Server — arc_raster","text":"","code":"arc_raster(   x,   xmin,   xmax,   ymin,   ymax,   bbox_crs = NULL,   crs = sf::st_crs(x),   width = NULL,   height = NULL,   format = \"tiff\",   ...,   raster_fn = NULL,   token = arc_token() )"},{"path":"/reference/arc_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read from an Image Server — arc_raster","text":"x ImageServer created arc_open(). xmin minimum bounding longitude value. xmax maximum bounding longitude value. ymin minimum bounding latitude value. ymax maximum bounding latitude value. bbox_crs CRS values passed xmin, xmax, ymin, ymax. specified, uses CRS x. crs CRS resultant raster image provided bounding box defined xmin, xmax, ymin, ymax (passed outSR query parameter). width default NULL. exceed x[[\"maxImageWidth\"]]. height default NULL. exceed x[[\"maxImageHeight\"]]. format default \"tiff\". Must one \"jpgpng\", \"png\", \"png8\", \"png24\", \"jpg\", \"bmp\", \"gif\", \"tiff\", \"png32\", \"bip\", \"bsq\", \"lerc\". ... additional key value pairs passed httr2::req_body_form(). raster_fn scalar string name service raster function. See list_service_raster_fns() available raster functions. token default arc_token() authorization token.","code":""},{"path":"/reference/arc_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read from an Image Server — arc_raster","text":"object class SpatRaster.","code":""},{"path":[]},{"path":"/reference/arc_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read from an Image Server — arc_raster","text":"","code":"if (FALSE) { # \\dontrun{ img_url <- \"https://landsat2.arcgis.com/arcgis/rest/services/Landsat/MS/ImageServer\"  landsat <- arc_open(img_url)  arc_raster(   landsat,   xmin = -71,   xmax = -67,   ymin = 43,   ymax = 47.5,   bbox_crs = 4326,   width = 100,   height = 100 ) } # }"},{"path":"/reference/arc_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read an ArcGIS FeatureLayer, Table, or ImageServer — arc_read","title":"Read an ArcGIS FeatureLayer, Table, or ImageServer — arc_read","text":"arc_read() combines functionality arc_open() arc_select() arc_raster() read ArcGIS FeatureLayer, Table, ImageServer sf SpatRaster object. Optionally, set, check, modify names returned data frame sf object using col_names name_repair parameters. ease use convenience, arc_read() allows users access query FeatureLayer, Table, ImageServer single function call instead combining arc_open() arc_select(). conventions col_select based functions reading tabular data {readr} package.","code":""},{"path":"/reference/arc_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read an ArcGIS FeatureLayer, Table, or ImageServer — arc_read","text":"","code":"arc_read(   url,   col_names = TRUE,   col_select = NULL,   n_max = Inf,   name_repair = \"unique\",   crs = NULL,   ...,   fields = NULL,   alias = c(\"drop\", \"label\", \"replace\"),   token = arc_token() )"},{"path":"/reference/arc_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read an ArcGIS FeatureLayer, Table, or ImageServer — arc_read","text":"url url remote resource. Must length one. col_names Default TRUE. Column names name handling rule. col_names can TRUE, FALSE, NULL, character vector: TRUE, use existing default column names layer table. FALSE NULL, column names generated automatically: X1, X2, X3 etc. col_names character vector, values replace existing column names. col_names length 0 longer number fields returned layer. col_select Default NULL. character vector field names returned. default, fields returned. n_max Defaults Inf option set options(\"arcgislayers.n_max\" = <max records>). Maximum number records return. name_repair Default \"unique\". See vctrs::vec_as_names() details. name_repair = NULL, names set directly. crs spatial reference returned. CRS different CRS input FeatureLayer, transformation occur server-side. Ignored x Table. ... Additional arguments passed arc_select() URL FeatureLayer Table arc_raster() URL ImageLayer. fields Default NULL. character vector field names returned. default fields returned. Ignored col_names supplied. alias Use field alias values. Default c(\"drop\", \"label\", \"replace\"),. three options: \"drop\", field alias values ignored. \"label\": field alias values assigned label attribute field. \"replace\": field alias values replace existing column names. col_names must TRUE option applied. token authorization token.","code":""},{"path":"/reference/arc_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read an ArcGIS FeatureLayer, Table, or ImageServer — arc_read","text":"sf object, data.frame, object class SpatRaster.","code":""},{"path":[]},{"path":[]},{"path":"/reference/arc_read.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read an ArcGIS FeatureLayer, Table, or ImageServer — arc_read","text":"","code":"if (FALSE) { # \\dontrun{   furl <- \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/Census/MapServer/3\"    # read entire service   arc_read(furl)    # apply tolower() to column names   arc_read(url, name_repair = tolower)    # use paste0 to prevent CRAN check NOTE   furl <- paste0(     \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/\",     \"EmergencyFacilities/FeatureServer/0\"   )   # use field aliases as column names  arc_read(furl, col_names = \"alias\")   # read an ImageServer directly  img_url <- \"https://landsat2.arcgis.com/arcgis/rest/services/Landsat/MS/ImageServer\"   arc_read(    img_url,    width = 100, height = 100,    xmin = -71, ymin = 43,    xmax = -67, ymax = 47.5,    bbox_crs = 4326  )  } # }"},{"path":"/reference/arc_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Query a Feature Service — arc_select","title":"Query a Feature Service — arc_select","text":"arc_select() takes FeatureLayer, Table, ImageServer object returns data layer sf object data.frame respectively.","code":""},{"path":"/reference/arc_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query a Feature Service — arc_select","text":"","code":"arc_select(   x,   ...,   fields = NULL,   where = NULL,   crs = sf::st_crs(x),   geometry = TRUE,   filter_geom = NULL,   predicate = \"intersects\",   n_max = Inf,   page_size = NULL,   token = arc_token() )"},{"path":"/reference/arc_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query a Feature Service — arc_select","text":"x object class FeatureLayer, Table, ImageServer. ... additional query parameters passed API. fields character vector field names wish returned. default fields returned. simple SQL statement indicating features selected. crs spatial reference returned. CRS different CRS input FeatureLayer, transformation occur server-side. Ignored x Table. geometry default TRUE. geometries returned. Ignored Table objects. filter_geom object class bbox, sfc sfg used filter query results based predicate function. predicate Spatial predicate use filter_geom. Default \"intersects\". Possible options \"intersects\", \"contains\", \"crosses\",  \"overlaps\",  \"touches\", \"within\". n_max maximum number features return. default returns every feature available. Unused moment. page_size maximum number features return per request. Useful requests return 500 error code. See Details. token authorization token.","code":""},{"path":"/reference/arc_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query a Feature Service — arc_select","text":"sf object, data.frame","code":""},{"path":"/reference/arc_select.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query a Feature Service — arc_select","text":"See reference documentation possible arguments. FeatureLayers can contain dense geometries lot coordinates. cases, feature service may time geometries can returned. address issue, can reduce number features returned per request reducing value page_size parameter. arc_select() works sending single request counts number features returned current query. number used calculate many \"pages\" responses needed fetch results. number features returned (page size) set maxRecordCount property layer default. However, setting page_size smaller maxRecordCount can return fewer geometries per page avoid time outs.","code":""},{"path":"/reference/arc_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query a Feature Service — arc_select","text":"","code":"if (FALSE) { # \\dontrun{ # define the feature layer url furl <- paste0(   \"https://services3.arcgis.com/ZvidGQkLaDJxRSJ2/arcgis/rest\",   \"/services/PLACES_LocalData_for_BetterHealth/FeatureServer/0\" )  flayer <- arc_open(furl)  arc_select(   flayer,   fields = c(\"StateAbbr\", \"TotalPopulation\") )  arc_select(   flayer,   fields = c(\"OBJECTID\", \"PlaceName\"),   where = \"TotalPopulation > 1000000\" ) } # }"},{"path":"/reference/attachments.html","id":null,"dir":"Reference","previous_headings":"","what":"Query and download attachments — query_layer_attachments","title":"Query and download attachments — query_layer_attachments","text":"Get metadata attachments associated features layer. Query attachment information using query_layer_attachments() download attachments using download_attachments().","code":""},{"path":"/reference/attachments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query and download attachments — query_layer_attachments","text":"","code":"query_layer_attachments(   x,   definition_expression = \"1=1\",   attachments_definition_expression = NULL,   object_ids = NULL,   global_ids = NULL,   attachment_types = NULL,   keywords = NULL,   return_metadata = TRUE,   ...,   token = arc_token() )  download_attachments(   attachments,   out_dir,   ...,   overwrite = FALSE,   .progress = TRUE,   token = arc_token() )"},{"path":"/reference/attachments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query and download attachments — query_layer_attachments","text":"x object class FeatureLayer, Table, ImageServer. definition_expression default 1 = 1. SQL clause applied layer. records conform expression returned. parameter required neither object_ids global_ids defined. attachments_definition_expression default NULL. SQL calsue applied attachment metadata. attachments conform expression returned. object_ids mutually exclusive definition_expression global_ids. object IDs features query attachments . global_ids mutally exclusive definition_expression object_ids. global IDs features query attachments . attachment_types default NULL. character vector attachment types filter . keywords default NULL. character vector keywords filter . return_metadata default TRUE. Returns metadata stored exifInfo field. ... unused token authorization token. attachments data.frame created query_layer_attachments(). Must contain columns name, url, contentType. out_dir path folder download file overwrite default FALSE. .progress default TRUE. Whether progress bar provided.","code":""},{"path":"/reference/attachments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query and download attachments — query_layer_attachments","text":"query_layer_attachments() returns data.frame. download_attachments() returns list. error occurs, condition captured returned list. Otherwise path file downloaded returned.","code":""},{"path":"/reference/attachments.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Query and download attachments — query_layer_attachments","text":"ArcGIS REST API Documentation","code":""},{"path":"/reference/attachments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query and download attachments — query_layer_attachments","text":"","code":"if (FALSE) { # \\dontrun{ # create a url path that isn't too wide for CRAN furl <- paste(   c(     \"https://services1.arcgis.com/hLJbHVT9ZrDIzK0I\",     \"arcgis/rest/services/v8_Wide_Area_Search_Form_Feature_Layer___a2fe9c\",     \"FeatureServer/0\"   ),   collapse = \"/\" ) # connect to the layer layer <- arc_open(furl)  # get the attachment info att <- query_layer_attachments(layer)  # download them to a path download_attachments(att, \"layer_attachments\") } # }"},{"path":"/reference/create_feature_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a FeatureServer — create_feature_server","title":"Create a FeatureServer — create_feature_server","text":"Creates empty FeatureServer additional layers.","code":""},{"path":"/reference/create_feature_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a FeatureServer — create_feature_server","text":"","code":"create_feature_server(   service_name,   description = \"\",   crs = 3857,   capabilities = c(\"create\", \"delete\", \"query\", \"update\", \"editing\"),   query_formats = c(\"json\", \"geojson\"),   initial_extent = list(xmin = NULL, xmax = NULL, ymin = NULL, ymax = NULL),   max_record_count = 1000L,   allow_updates = TRUE,   copyright = \"\",   has_static_data = FALSE,   xss_prevention = xss_defaults(),   token = arc_token() )  xss_defaults()"},{"path":"/reference/create_feature_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a FeatureServer — create_feature_server","text":"service_name Feature Service name. description default blank. description feature server. crs default 3857. coordinate reference system set feature server. Must compatible sf::st_crs(). capabilities default full capabilities. Character vector capabilities. query_formats default json geojson. May restricted site-wide settings. initial_extent optional. named list element xmin, xmax, ymin, ymax. Values must CRS crs. max_record_count default 1000. maximum number records can retrieved layer one request. allow_updates default TRUE. Determine geometries can updated. copyright default blank. Copyright notice provide Feature Server has_static_data default FALSE. Indicates data changing. xss_prevention cross-site-scripting prevention enabled default. See details . token httr2_token created auth_code() similar","code":""},{"path":"/reference/create_feature_server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a FeatureServer — create_feature_server","text":"FeatureServer created successfully, FeatureServer object returned based newly created feature server's url.","code":""},{"path":[]},{"path":"/reference/create_feature_server.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a FeatureServer — create_feature_server","text":"","code":"if (FALSE) { # \\dontrun{   set_arc_token(auth_code())   create_feature_server(\"My empty feature server\") } # }"},{"path":"/reference/get_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a layer from a Feature or Map Server — get_layer","title":"Extract a layer from a Feature or Map Server — get_layer","text":"helpers provide easy access layers contained FeatureServer MapServer.","code":""},{"path":"/reference/get_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a layer from a Feature or Map Server — get_layer","text":"","code":"get_layer(x, id = NULL, name = NULL, token = arc_token())  get_all_layers(x, token = arc_token())  get_layers(x, id = NULL, name = NULL, token = arc_token())"},{"path":"/reference/get_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a layer from a Feature or Map Server — get_layer","text":"x object class FeatureServer MapServer id default NULL. numeric vector unique ID layer want retrieve. scalar get_layer(). name default NULL. name associated layer want retrieve. name mutually exclusive id. scalar get_layer(). token authorization token.","code":""},{"path":"/reference/get_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a layer from a Feature or Map Server — get_layer","text":"get_layer() returns single FeatureLayer Table based ID get_layers() returns list items specified id name argument get_all_layers() returns named list element layers tables. list containing FeatureLayer Tables respectively.","code":""},{"path":"/reference/get_layer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract a layer from a Feature or Map Server — get_layer","text":"id name arguments must match field values respective names seen output list_items()","code":""},{"path":"/reference/get_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a layer from a Feature or Map Server — get_layer","text":"","code":"if (FALSE) { # \\dontrun{   # FeatureServer   furl <- paste0(     \"https://services3.arcgis.com/ZvidGQkLaDJxRSJ2/arcgis/rest/services/\",     \"PLACES_LocalData_for_BetterHealth/FeatureServer\"   )    fserv <- arc_open(furl)    fserv   get_layer(fserv, 0)   get_layers(fserv, name = c(\"Tracts\", \"ZCTAs\"))   get_all_layers(fserv) } # }"},{"path":"/reference/get_layer_estimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Estimates — get_layer_estimates","title":"Get Estimates — get_layer_estimates","text":"Get Estimates","code":""},{"path":"/reference/get_layer_estimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Estimates — get_layer_estimates","text":"","code":"get_layer_estimates(x, token = arc_token())"},{"path":"/reference/get_layer_estimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Estimates — get_layer_estimates","text":"x object class FeatureLayer, Table, ImageServer. token authorization token.","code":""},{"path":"/reference/get_layer_estimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Estimates — get_layer_estimates","text":"named list containing estimate info. extent present, available object class bbox.","code":""},{"path":"/reference/get_layer_estimates.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Estimates — get_layer_estimates","text":"ArcGIS REST Doc","code":""},{"path":"/reference/get_layer_estimates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Estimates — get_layer_estimates","text":"","code":"furl <- paste0(   \"https://services.arcgis.com/P3ePLMYs2RVChkJx/ArcGIS/rest/services/\",   \"USA_Counties_Generalized_Boundaries/FeatureServer/0\" )  county_fl <- arc_open(furl) get_layer_estimates(county_fl) #> $count #> [1] 3143 #>  #> $extent #>       xmin       ymin       xmax       ymax  #> -178.21760   18.92179  -66.96927   71.40624  #>"},{"path":"/reference/list_service_raster_fns.html","id":null,"dir":"Reference","previous_headings":"","what":"List Available Raster Funcitons — list_service_raster_fns","title":"List Available Raster Funcitons — list_service_raster_fns","text":"function returns rasterFunctionInfos field ImageServer's metadata data.frame. field exist error emitted.","code":""},{"path":"/reference/list_service_raster_fns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Available Raster Funcitons — list_service_raster_fns","text":"","code":"list_service_raster_fns(   x,   arg = rlang::caller_arg(x),   call = rlang::caller_call() )"},{"path":"/reference/list_service_raster_fns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Available Raster Funcitons — list_service_raster_fns","text":"x ImageServer. arg argument name current function. call execution environment currently running function, e.g. call = caller_env(). corresponding function call retrieved mentioned error messages source error. need supply call throwing condition helper function relevant mention message. Can also NULL defused function call respectively display call hard-code code display. information error calls, see Including function calls error messages.","code":""},{"path":"/reference/list_service_raster_fns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Available Raster Funcitons — list_service_raster_fns","text":"data.frame available raster functions.","code":""},{"path":"/reference/list_service_raster_fns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Available Raster Funcitons — list_service_raster_fns","text":"","code":"# use paste to avoid cran note furl <- paste0(   \"https://di-usfsdata.img.arcgis.com/arcgis/rest/services\",   \"/FIA_BIGMAP_2018_Species_Aboveground_Biomass/ImageServer\" )  service <- arc_open(furl) raster_fns <- list_service_raster_fns(service) head(raster_fns) #> # A data frame: 6 × 3 #>   name                     description                                     help  #> * <chr>                    <chr>                                           <chr> #> 1 SPCD_0000_TOTAL          TOTAL                                           \"\"    #> 2 None                     Make a Raster or Raster Dataset into a Functio… \"\"    #> 3 SPCD_0010_Abies_spp.     fir spp.                                        \"\"    #> 4 SPCD_0011_Abies_amabilis Pacific silver fir                              \"\"    #> 5 SPCD_0012_Abies_balsamea balsam fir                                      \"\"    #> 6 SPCD_0015_Abies_concolor white fir                                       \"\""},{"path":"/reference/modify.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Features to Feature Layer — add_features","title":"Add Features to Feature Layer — add_features","text":"Delete features feature layer based object ID, clause, spatial filter.","code":""},{"path":"/reference/modify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Features to Feature Layer — add_features","text":"","code":"add_features(   x,   .data,   chunk_size = 2000,   match_on = c(\"name\", \"alias\"),   rollback_on_failure = TRUE,   token = arc_token() )  update_features(   x,   .data,   match_on = c(\"name\", \"alias\"),   token = arc_token(),   rollback_on_failure = TRUE,   ... )  delete_features(   x,   object_ids = NULL,   where = NULL,   filter_geom = NULL,   predicate = \"intersects\",   rollback_on_failure = TRUE,   token = arc_token(),   ... )"},{"path":"/reference/modify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Features to Feature Layer — add_features","text":"x object class FeatureLayer .data object class sf data.frame chunk_size maximum number features add time match_on whether match alias field name. Default, alias. See Details . rollback_on_failure default TRUE. Specifies whether edits applied submitted edits succeed. token default arc_token(). httr2_token. ... additional query parameters passed API. object_ids numeric vector object IDs deleted. simple SQL statement indicating features deleted. statement evaluates TRUE, values deleted. filter_geom object class bbox, sfc sfg used filter query results based predicate function. predicate Spatial predicate use filter_geom. Default \"intersects\". Possible options \"intersects\", \"contains\", \"crosses\",  \"overlaps\",  \"touches\", \"within\".","code":""},{"path":"/reference/modify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Features to Feature Layer — add_features","text":"add_features() returns data.frame columns objectId, uniqueId, globalId, success update_features() returns list element named updateResults data.frame columns objectId, uniqueId, globalId, success delete_features() returns list element named deleteResults data.frame columns objectId, uniqueId, globalId, success","code":""},{"path":"/reference/modify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Features to Feature Layer — add_features","text":"detailed guide adding, updating, deleting features, view tutorial R-ArcGIS Bridge website. Regarding match_on argument:publishing object ArcGIS Portal R, object's names provided alias. object's names subject change according standards ArcGIS REST API. example. \"Sepal.Length\" changed \"Sepal_Width\" name field alias remains \"Sepal.Length\". reason, match alias name default. Change argument match based field name.","code":""},{"path":"/reference/modify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Features to Feature Layer — add_features","text":"","code":"if (FALSE) { # \\dontrun{   # this is pseudo-code and will not work   flayer <- arc_open(furl)    # add sf objects to existing feature service   add_features(flayer, sfobj)    # delete all features   delete_features(flayer, where = \"1 = 1\")    # update features   update_features(flayer, dfobj) } # }"},{"path":"/reference/publish.html","id":null,"dir":"Reference","previous_headings":"","what":"Publish Content — add_item","title":"Publish Content — add_item","text":"Publishes sf data.frame object ArcGIS Portal FeatureCollection.","code":""},{"path":"/reference/publish.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Publish Content — add_item","text":"","code":"add_item(   x,   title,   description = \"\",   tags = character(0),   snippet = \"\",   categories = character(0),   async = FALSE,   type = \"Feature Service\",   token = arc_token() )  publish_item(   item_id,   publish_params = .publish_params(),   file_type = \"featureCollection\",   token = arc_token() )  publish_layer(   x,   title,   ...,   publish_params = .publish_params(title, target_crs = sf::st_crs(x)),   token = arc_token() )  .publish_params(   name = NULL,   description = NULL,   copyright = NULL,   target_crs = 3857,   max_record_count = 2000L )"},{"path":"/reference/publish.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Publish Content — add_item","text":"x object class data.frame. can sf object tibble subclass data.frame. title user-friendly string title layer can used table contents. description length 1 character vector containing description item added. Note value larger 64kb. tags character vector tags add item. snippet length 1 character vector 2048 characters. categories character vector categories item. async default FALSE. changed time. type default \"Feature Service\". Must changed time. token httr2_token created auth_code() similar item_id ID item published. publish_params list named values publishParameters. Must match values /publish endpoint documentation. file_type default \"featureCollection\". changed. ... arguments passed add_item(). name scalar character name layer. Must unique. copyright optional character scalar containing copyright text add published Feature Service. target_crs CRS Feature Service created. default, EPSG:3857. max_record_count maximum number records can returned created Feature Service.","code":""},{"path":"/reference/publish.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Publish Content — add_item","text":"named list containing url newly published service.","code":""},{"path":"/reference/publish.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Publish Content — add_item","text":"add_item() takes data.frame like object uploads item portal. publish_item() takes ID item portal publishes feature service. publish_layer() high-level wrapper first adds object item portal subsequently publishes . .publish_params() utility function specify optional publish parameters copyright text, spatial reference published feature collection. Note support feature services meaning tables feature layers can made functions.","code":""},{"path":"/reference/publish.html","id":"publish-parameters","dir":"Reference","previous_headings":"","what":"Publish Parameters","title":"Publish Content — add_item","text":"publishing item portal, number publish parameters can provided. importantly targetSR CRS hosted feature service. default EPSG:3857. publish_layer() use CRS input object, x, default. publishing content two steps add_item() publish_item(), use .publish_params() craft publish parameters. Ensure CRS provided target_crs matches item added add_item().","code":""},{"path":"/reference/publish.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Publish Content — add_item","text":"","code":"if (FALSE) { # \\dontrun{   nc <- sf::st_read(system.file(\"shape/nc.shp\", package = \"sf\"))   x <- nc[1:5, 13]    token <- auth_code()   set_arc_token(token)    publish_res <- publish_layer(     x, \"North Carolina SIDS sample\"   ) } # }"},{"path":"/reference/spatial_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare JSON for use as a spatial filter based on feature geometry or bounding box input — prepare_spatial_filter","title":"Prepare JSON for use as a spatial filter based on feature geometry or bounding box input — prepare_spatial_filter","text":"prepare_spatial_filter() prepares named list ESRI JSON geometry use spatial filter based sfc, sfg, bbox input object. match_spatial_rel() takes scalar character vector predicate name type ESRI spatial relation.","code":""},{"path":"/reference/spatial_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare JSON for use as a spatial filter based on feature geometry or bounding box input — prepare_spatial_filter","text":"","code":"prepare_spatial_filter(   filter_geom,   crs,   predicate,   error_call = rlang::caller_env() )  match_spatial_rel(predicate, error_call = rlang::caller_env())"},{"path":"/reference/spatial_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare JSON for use as a spatial filter based on feature geometry or bounding box input — prepare_spatial_filter","text":"filter_geom object class bbox, sfc sfg used filter query results based predicate function. crs representation coordinate reference system. predicate Spatial predicate use filter_geom. Default \"intersects\". Possible options \"intersects\", \"contains\", \"crosses\",  \"overlaps\",  \"touches\", \"within\". error_call default rlang::caller_env().","code":""},{"path":"/reference/spatial_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare JSON for use as a spatial filter based on feature geometry or bounding box input — prepare_spatial_filter","text":"prepare_spatial_filter() returns named list geometryType, geometry (Esri JSON), spatial relation predicate. match_spatial_rel() returns one following spatial binary predicates: esriSpatialRelIntersects esriSpatialRelContains esriSpatialRelCrosses esriSpatialRelOverlaps esriSpatialRelTouches esriSpatialRelWithin","code":""},{"path":"/reference/spatial_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare JSON for use as a spatial filter based on feature geometry or bounding box input — prepare_spatial_filter","text":"Using sfc objects filter_geom  sfc object provided transformed layers spatial reference. sfc missing CRS (sfg object) assumed use spatial reference FeatureLayer. sfc object multiple features, features unioned sf::st_union(). sfc object MULTIPOLYGON geometry, features unioned cast POLYGON geometry sf::st_cast(). geometries checked validity conversion.","code":""},{"path":"/reference/spatial_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare JSON for use as a spatial filter based on feature geometry or bounding box input — prepare_spatial_filter","text":"","code":"prepare_spatial_filter(sf::st_point(c(0, 5)), 4326, \"intersects\") #> $geometryType #> [1] \"esriGeometryPoint\" #>  #> $geometry #> [1] \"{\\\"x\\\":0.0,\\\"y\\\":5.0,\\\"spatialReference\\\":{\\\"wkid\\\":4326}}\" #>  #> $spatialRel #> [1] \"esriSpatialRelIntersects\" #>"},{"path":"/reference/truncate_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncate a Feature Layer — truncate_layer","title":"Truncate a Feature Layer — truncate_layer","text":"Removes features Feature Layer Table resets object ID counter. Truncating Feature Layer change schema data (add, remove, alter existing database columns, constraints, indexes).","code":""},{"path":"/reference/truncate_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truncate a Feature Layer — truncate_layer","text":"","code":"truncate_layer(x, async = FALSE, attachment_only = FALSE, token = arc_token())"},{"path":"/reference/truncate_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truncate a Feature Layer — truncate_layer","text":"x object class FeatureLayer, Table, ImageServer. async default FALSE. recommended set TRUE larger datasets. attachment_only default FALSE. Deletes attachments layer. None layer features deleted TRUE. token authorization token.","code":""},{"path":"/reference/truncate_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Truncate a Feature Layer — truncate_layer","text":"named list name \"success\" value TRUE FALSE","code":""},{"path":"/reference/truncate_layer.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Truncate a Feature Layer — truncate_layer","text":"ArcGIS Developers Rest API Doc","code":""},{"path":"/reference/truncate_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Truncate a Feature Layer — truncate_layer","text":"","code":"if (FALSE) { # \\dontrun{    # authorize using code flow   set_arc_token(auth_code())    # create a FeatureLayer object   flayer <- arc_open(\"your-feature-layer-url\")    # truncate it   truncate_layer(flayer) } # }"},{"path":"/reference/update_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify query parameters — update_params","title":"Modify query parameters — update_params","text":"update_params() takes named arguments updates query.","code":""},{"path":"/reference/update_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify query parameters — update_params","text":"","code":"update_params(x, ...)"},{"path":"/reference/update_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify query parameters — update_params","text":"x FeatureLayer Table object ... key value pairs query parameters values.","code":""},{"path":"/reference/update_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify query parameters — update_params","text":"object class x","code":""},{"path":"/reference/update_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify query parameters — update_params","text":"","code":"if (FALSE) { # \\dontrun{ furl <- paste0(   \"https://services.arcgis.com/P3ePLMYs2RVChkJx/ArcGIS/rest/services/\",   \"USA_Major_Cities_/FeatureServer/0\" )  flayer <- arc_open(furl) update_params(flayer, outFields = \"NAME\") } # }"},{"path":"/reference/utils.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility functions — clear_query","title":"Utility functions — clear_query","text":"Utility functions","code":""},{"path":"/reference/utils.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility functions — clear_query","text":"","code":"clear_query(x)  list_fields(x)  pull_field_aliases(x)  list_items(x)  refresh_layer(x)"},{"path":"/reference/utils.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility functions — clear_query","text":"x object class FeatureLayer, Table, ImageServer.","code":""},{"path":"/reference/utils.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility functions — clear_query","text":"See Details.","code":""},{"path":"/reference/utils.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Utility functions — clear_query","text":"list_fields() returns data.frame fields FeatureLayer Table list_items() returns data.frame containing layers tables FeatureServer MapServer clear_query() removes saved query FeatureLayer Table object refresh_layer() syncs FeatureLayer Table remote resource picking changes may made upstream. Returns object class x. pull_field_aliases() returns named list field aliases FeatureLayer Table","code":""},{"path":"/reference/utils.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility functions — clear_query","text":"","code":"if (FALSE) { # \\dontrun{ furl <- paste0(   \"https://services3.arcgis.com/ZvidGQkLaDJxRSJ2/arcgis/rest/services/\",   \"PLACES_LocalData_for_BetterHealth/FeatureServer/0\" )  flayer <- arc_open(furl)  # list fields available in a layer list_fields(flayer)  # remove any queries stored in the query attribute clear_query(update_params(flayer, outFields = \"*\"))  # refresh metadata of an object refresh_layer(flayer)  map_url <- paste0(   \"https://services.arcgisonline.com/ArcGIS/rest/services/\",   \"World_Imagery/MapServer\" )  # list all items in a server object list_items(arc_open(map_url)) } # }"},{"path":[]},{"path":"/news/index.html","id":"breaking-changes-development-version","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"arcgislayers (development version)","text":"dplyr methods collect(), select(), filter() removed. https://github.com/R-ArcGIS/arcgislayers/issues/111 https://github.com/R-ArcGIS/arcgislayers/issues/224 https://github.com/R-ArcGIS/arcgislayers/issues/218","code":""},{"path":"/news/index.html","id":"arcgislayers-031","dir":"Changelog","previous_headings":"","what":"arcgislayers 0.3.1","title":"arcgislayers 0.3.1","text":"CRAN release: 2024-09-27","code":""},{"path":"/news/index.html","id":"bug-fixes-0-3-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"arcgislayers 0.3.1","text":"page_size resulted error due introduction type-check. Fixed added test avoid future. #205 Add warning arc_select() results include fewer features expected request #220","code":""},{"path":"/news/index.html","id":"new-features-0-3-1","dir":"Changelog","previous_headings":"","what":"New features","title":"arcgislayers 0.3.1","text":"arc_raster() gains argument raster_fn takes character scalar performs raster function server side returning results list_service_raster_fns() new helper function list available raster functions ImageServer arc_open() ignores queries included input URLs retains custom queries query attribute Table FeatureLayers. (#215)","code":""},{"path":[]},{"path":"/news/index.html","id":"arcgislayers-030","dir":"Changelog","previous_headings":"","what":"arcgislayers 0.3.0","title":"arcgislayers 0.3.0","text":"CRAN release: 2024-07-05 arc_open() now work resource works f=json set query parameters closes #163 ~3x speed improvement json processing. New query_layer_attachments() download_attachments() help access download attachments layer arc_raster() now downloads exported image temp file instead creating connection url returned. fixes issue rasters stop working url removed. Add alias argument arc_read() allowing replacement labelling field names alias values (#169) Add pull_field_aliases() utility function arc_select() now uses arcgisutils::rbind_results() faster row-binding collapse, data.table, vctrs installed (#175) Preserve order fields column names arc_select() (fixes minor bug arc_read handling col_names) (#185) Set CRS FeatureLayer ImageServer using \"wkid\" \"wkt\" value \"latestWkid\" missing. (#188) Fix issue arc_select() layer can’t support pagination. (#191)","code":""},{"path":"/news/index.html","id":"arcgislayers-020","dir":"Changelog","previous_headings":"","what":"arcgislayers 0.2.0","title":"arcgislayers 0.2.0","text":"CRAN release: 2024-02-27 initial CRAN release","code":""},{"path":"/news/index.html","id":"arcgislayers-010","dir":"Changelog","previous_headings":"","what":"arcgislayers 0.1.0","title":"arcgislayers 0.1.0","text":"arc_open() longer removes NULL properties h/t @elipousson includes page_size argument arc_select() allowing users return smaller page sizes avoid timeouts dense geometries Add support GroupLayers Add arc_read() support name_repair argument using vctrs (#108) Add get_layer_estimates() retrieve estimate info number features extent layer Add truncate_layer() support truncate append workflow Add support opening MapServers https://github.com/R-ArcGIS/arcgislayers/pull/83 arc_open() layer support Query sets n attribute toNA https://github.com/R-ArcGIS/arcgislayers/pull/83 Print method show something like <FeatureLayer <NA features, 10 fields>> arc_select() now supported ImageServers #78 add_features() now paginated performed parallel. gains argument chunk_size determines maximum number rows added feature service. adds get_layers() can fetch multiple items FeatureServer MapServer new utility function list_items() adds cli explicit import (implicitly imported httr2) repository made public add lifecycle badges exported functions https://github.com/R-ArcGIS/arcgislayers/pull/101 Breaking: token arguments required valid httr2_token object (strings supported). host arguments removed. Instead, host fetched token. user arguments removed. Instead, username fetched token. found, error thrown.","code":""}]
